[
  {
    "objectID": "win11-for-engineers-manual.html",
    "href": "win11-for-engineers-manual.html",
    "title": "Руководство",
    "section": "",
    "text": "Этап 1: Установка базового набора рабочих программ\n  1 Установка Windows 11 и MSOffice\n  \n  1.1 Скачать официальные установщики пакетов Windows и MSOffice\n  1.2 Выбор версий продуктов Microsoft\n  1.3 Установка Windows и MSOffice\n  1.4 Настройки Windows\n  1.5 Клавиши быстрого доступа (shortcut keys) в Windows\n  \n  2 Установка программ\n  \n  2.1 Scoop\n  2.2 Winget\n  2.3 Chocolatey\n  2.4 Обновление (update) всех установленных в Windows программ\n  2.5 Некоторые программы и утилиты\n  2.6 Backup операционной системы Windows\n  2.7 Браузеры\n  2.8 Far Manager и консольный терминал\n  2.9 Многокарманный буфер обмена\n  2.10 Системы виртуализации WSL и Docker\n  2.11 ssh/PuTTY\n  2.12 X-server\n  2.13 Удалённый рабочий стол\n  2.14 OpenVPN\n  \n  Этап 2: Установка и настройка иногда нужных программ\n  3 Настройка среды для программирования\n  \n  3.1 VSCode\n  3.2 C/C++\n  3.3 Python\n  3.4 Fortran\n  3.5 Julia\n  3.6 Система контроля версий Git\n  3.7 Полезные консольные утилитки\n  \n  4 Работа с документами\n  \n  4.1 Офисные пакеты\n  4.2 Текстовые документы\n  4.3 Программы для ведения заметок\n  4.4 Обработка картинок и создание видео\n  \n  Этап 3: Сложные нужные программы\n  5 Инженерные программы\n  \n  5.1 OpenFOAM\n  5.2 ParaView\n  5.3 FreeCAD\n  5.4 Blender\n  5.5 3D reverse engineering\n  \n  6 Математика\n  \n  6.1 Калькулятор!\n  6.2 Matlab аналоги\n  6.3 SageMath\n  6.4 Maxima\n  6.5 Построение графиков\n  \n  Этап 4: Сложные ненужные программы\n  7 Приложение: AI/LLM\n  \n  7.1 Рекомендации по выбору моделей\n  7.2 Программы для работы с локальными LLM\n  7.3 Примеры запросов\n  7.4 ИИ помощники\n  7.5 Работа с документами\n  \n  8 Приложение: Консольные терминалы и приложения\n  \n  8.1 Ограничения командной строки Windows\n  8.2 Консольная оболочка Clink и утилиты BusyBox\n  8.3 Консольный терминал WindowsTerminal + Clink\n  8.4 Консольный терминал Cmder/Conemu + Clink\n  8.5 Замечание про HOME\n  8.6 Neovim\n  \n  9 Приложение: Виртуалки\n  \n  9.1 Управление Docker’ом\n  9.2 Backup/Restore WSL систем\n  \n  10 Приложение: Загрузка продуктов Microsoft\n  \n  10.1 UUP — Unified Update Platform — загрузка MS Windows\n  10.2 ODT — Office Deployment Tool — загрузка MS Office\n  \n  11 Приложение: Документация и ссылки\nОпубликовано под лицензией CC-BY-NC-SA.\nVersion: 0.4.1"
  },
  {
    "objectID": "win11-for-engineers-manual.html#скачать-официальные-установщики-пакетов-windows-и-msoffice",
    "href": "win11-for-engineers-manual.html#скачать-официальные-установщики-пакетов-windows-и-msoffice",
    "title": "Руководство",
    "section": "1.1 Скачать официальные установщики пакетов Windows и MSOffice",
    "text": "1.1 Скачать официальные установщики пакетов Windows и MSOffice\nНа данный момент все инсталяторы для продуктов Microsoft загружаются через интернет, это официальный рекомендуемый способ установки — диски отошли в прошлое. Ссылки на загрузку Windows, загрузку MS Office. Инструкция как создать загрузочную флешку с помощью Rufus.\n\nNote: В данном руководстве приходится расписывать специальные процедуры загрузки продуктов Microsoft, во-первых, из-за санкций, которые ограничивают загрузку напрямую, непосредственно с сайта Microsoft (хотя никакого запрета на продажу или использование лицензий Microsoft не существует), и, во-вторых, для контроля загружаемых версий — сейчас Microsoft продвигает только распоследний (глючный 24H2?) Windows 11, и только Office 365, поэтому, нормальный Windows, и обычный автономный Office не загрузить напрямую со страниц сайта Microsoft.\n\nСм. Приложение UUP — Unified Update Platform — загрузка MS Windows.\n\nСм. Приложение ODT — Office Deployment Tool — загрузка MS Office."
  },
  {
    "objectID": "win11-for-engineers-manual.html#выбор-версий-продуктов-microsoft",
    "href": "win11-for-engineers-manual.html#выбор-версий-продуктов-microsoft",
    "title": "Руководство",
    "section": "1.2 Выбор версий продуктов Microsoft",
    "text": "1.2 Выбор версий продуктов Microsoft\n\nWindows\nПоддержка Windows 10 закончится осенью 2025, после чего, скорее всего, интернет заполонят вирусы для этой версии Windows из-за отсутствия обновлений безопасности. Поэтому рекомендуется изначально устанавливать Windows 11.\nДля русскоговорящих пользователей следует устанавливать следует En версию Windows 11 Pro. А русский язык можно будет добавить после установки, даже полностью сменить интерфейс на русский. Если устанавливать сразу Ru версию, то в процессе установки будут созданы папки с русскими буквами в путях (Документы и т.д.), из-за чего не будут работать некоторые инженерные (HPC) программы. Так же, не следует использовать кириллицу в имени пользователя — это гарантированный способ сломать работоспособность инженерных программ, компиляторов; это настолько катастрофично, что, рано или поздно, но систему придётся переустановить. По этой же причине, в случае установки Windows версии Home, также следует устанавливать English версию, даже не смотря на то, что в Home-версии язык интерфейса сменить не удастся.\nДля установки рекомендуется использовать версию build 22631.3296 (23H2). Это версия, с одной стороны, достаточно свежая, чтобы были драйвера для новых моделей ноутбуков, а с другой стороны, эта версия всё ещё позволяет при установке создать локальную учётную запись, и провести установку при отсутствии интернета.\nNote: Для создания локальной учётной записи можно использовать и более новые версии Windows, при настройке с помощью Rufus, см. в Приложении Создание загрузочной флешки.\n\n\nMSOffice\nПодробности выбора версии пакета офиса в Приложении Выбор версии MSOffice."
  },
  {
    "objectID": "win11-for-engineers-manual.html#установка-windows-и-msoffice",
    "href": "win11-for-engineers-manual.html#установка-windows-и-msoffice",
    "title": "Руководство",
    "section": "1.3 Установка Windows и MSOffice",
    "text": "1.3 Установка Windows и MSOffice\nЗагрузиться с загрузочной флешки с инсталятором Windows. Для установки потребуется подключение к интернет для входа в учётную запись Microsoft (или создания новой). Если устанавливать версию Windows 23H2, или версию подготовленную Rufus, то можно обойтись без онлайн подключения, и активировать Windows позднее.\nUpd: Создать локальную учётную запись в процессе установки можно следующими командами: во время запроса на ввод учётной записи нажать Shift + F10, открыть командную строку, набрать и выполнить команду start ms-cxh:localonly. Нет гарантий, что этот метод в будущем не перестанет работать.\nЗапустить загруженный установщик MSOffice. После установки открыть любое приложение MSOffice, Word например; снизу слева будет меню Учетная запись, в нём выбрать Активировать…."
  },
  {
    "objectID": "win11-for-engineers-manual.html#настройки-windows",
    "href": "win11-for-engineers-manual.html#настройки-windows",
    "title": "Руководство",
    "section": "1.4 Настройки Windows",
    "text": "1.4 Настройки Windows\n\nРазрешить Windows Development Mode: (Settings &gt; Update & Security &gt; For Developers:) Settings &gt; System &gt; For Developers: Developer Mode -&gt; On\nТакже, для разработчиков, для поддержки длинных имён файлов выполнить в PowerShell(Admin):\nSet-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1\nПосле активации появится возможность переместить меню Старт влево: Setting &gt; Personalization &gt; TaskBar &gt; Taskbar behaviors &gt; Taskbar alignment.\nОтключить режим гибернации (hibernate): в Cmd/PowerShell(Admin) выполнить:\npowercfg /H off\nПосле установки региона Россия Windows настроит все соответствующие параметры, в том числе, установит запятую в качестве десятичного разделителя. Поправить на точку можно в ControlPannel, раздел Region &gt; Additional Settings… &gt; Decimal Symbol.\nНастройка действия на складывание ноутбука — поиском в меню Start слова Lid. Рекомендуется настроить везде Sleep, и при работе от аккумулятора, и при работе от сети. Современный ноутбук при постоянном использовании можно вообще никогда не выключать, а только переводить в сон.\nПоведение &lt;Alt+Tab&gt; — показывать ли отдельные Табы в списке окон по &lt;Alt+Tab&gt;: Settings &gt; System &gt; Mutitasking: Show tabs from apps…, установить в Don’t show tabs, тогда по &lt;Alt+Tab&gt; будут показываться только окна, без составляющих их табов.\nВключить встроенный многокарманный буфер обмена (Clipboard) в Windows — Win+V (Note: этот буфер очищается при перезагрузке!, поэтому, лучше использовать сторонний буфер обмена CopyQ).\nWindows Update &gt; Advanced Options &gt; включить Receive Updates for other Microsoft products. Это чтобы MSOffice тоже обновлялся.\nПосле установки всех программ отредактировать список программ запускаемых при загрузке: Settings &gt; Apps &gt; StartUp.\nПравой клавишей по трею &gt; Taskbar settings &gt; Other system tray icons, выбрать постоянно показываемые иконки:\nSafely Remove Hardware…\nWindows Update Status\nПлюс ещё какие нужные программы, а остальные спрятать чтобы не мешали.\nНастройка вида меню Start: Settings &gt; Personalization &gt; Start.\nВ меню Start в нижней строке можно расположить быстрый доступ к Папкам и Settings: Personalization &gt; Start &gt; Folders.\nЕсли Edge не используется, то есть пара утилит на случай, если Edge станет совсем занудным своими напоминаниями: GoAwayEdge и MSEdgeRedirect, которые отключают Edge и регулярно проверяют, чтобы Edge больше не просыпался.\nВысокое время задержки перед повтором нажатия клавиш (если не помогает стандартный метод ControlPanel &gt; Keyboard: Repeat delay) правится в реестре:\nregedit: HKEY_CURRENT_USER&gt;Control Panel&gt;Accessibility&gt;Keyboard Response:\nAutoRepeatDelay 200\nAutoRepeatRate 5\nBounceTime 0\nDelayBeforeAcceptance 10\nFlags 59\nЭти настройки могут слетать (при каждом обновлении Windows11?), поэтому, если ситуация будет повторяться, то надо сделать .reg файл для этого раздела регистра, и применять его, когда задержка перед повтором опять станет длительной. См. также Настройки. В общем, с этой задержкой перед повтором нажатий клавиш в Windows 11 какой-то баг, и, я полагаю, проблема разрешится с очередным обновлением.\nДля продвинутых пользователей есть утилита Winutil с широкими возможностями по установке и удаления утилит и программ, по тюнингу и настройке Windows, отключения телеметрии, и прочему. Установка в PowerShell от Администратора (Admin!):\nSet-ExecutionPolicy Unrestricted -Scope Process -Force\nirm https://github.com/ChrisTitusTech/winutil/releases/latest/download/winutil.ps1 | iex\nЗапуск через меню Пуск: Winutil.\nПеред применением рекомендуется сделать бекап системы.\nДля продвинутых пользователей есть утилита Win11Debloat для отключения телеметрии и удаления ненужных предустановленных программ. Этот скрипт имеет три режима работы, в одном из которых (3-ем) предлагается список предустановленного софта, где можно выбрать галочками что удалить а что оставить. Перед применением крайне рекомендуется сделать бекап системы."
  },
  {
    "objectID": "win11-for-engineers-manual.html#клавиши-быстрого-доступа-shortcut-keys-в-windows",
    "href": "win11-for-engineers-manual.html#клавиши-быстрого-доступа-shortcut-keys-в-windows",
    "title": "Руководство",
    "section": "1.5 Клавиши быстрого доступа (shortcut keys) в Windows",
    "text": "1.5 Клавиши быстрого доступа (shortcut keys) в Windows\nПолный список комбинаций клавиш быстрого доступа Windows, ещё один, и ещё один.\n\n1.5.1 Переключение окон\nWin+#Digit: Win+1, Win+2, и т.д. — быстрое переключение на приложение номер #Digit в Панели Задач/Taskbar. Если в Панели Задач закреплено (pin) несколько приложений, например: FileExplorer, Edge и Far, то, нажатие на Win+3 переключит на первый открытый Far, сколько бы ни было открыто слева окон проводников или браузеров. Повторное нажатие на Win+3 переключит на следующий открытый Far, и т.д.\nТо есть, закрепив в Панели Задач наиболее часто используемые приложения, их всегда можно сходу вызвать по их порядковому номеру соответствующей горячей клавишей Win+Номер.\n\n\n1.5.2 Переключение вкладок\nВ Windows во всех приложениях быстрый доступ к конкретной Вкладке/Табу (Tab) проводится по комбинации Ctrl+#Digit, т.е. Ctrl+1, Ctrl+2 и т.д. (кроме Windows Terminal, где Ctrl+Alt+1)\nПо Ctrl+Tab — листание Вкладок/Табов. Ctrl+Shift+Tab — листание Вкладок в обратном порядке.\n\n\n1.5.3 Остальные команды\n\nCtrl+D — свернуть все окна\nCtrl+Esc — меню Start (Пуск)\nCtrl+Shift+Esc — вызвать Task Manager (Менеджер Задач)\nWin+E — открыть новый File Explorer (Проводник)\n\nNote: Guide, как включить или выключить те или иные комбинаций клавиш быстрого доступа Windows.\nNote: Для очень продвинутых пользователей может быть интересна утилита AutoHotKey, которая позволяет запрограммировать любые действия на любые клавиши."
  },
  {
    "objectID": "win11-for-engineers-manual.html#scoop",
    "href": "win11-for-engineers-manual.html#scoop",
    "title": "Руководство",
    "section": "2.1 Scoop",
    "text": "2.1 Scoop\nhttps://scoop.sh/#/apps — сайт-каталог доступных программ.\nУстановка scoop с сайта https://scoop.sh/ — запустить две строчки в PowerShell (не Admin!):\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nInvoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression\nПосле выполнить проверку:\nscoop checkup\nЗдесь потребуется пара настроек Windows для Developer Mode и LongPaths, если они не были сделаны при установке Windows.\nУстановить все программы — в любом терминале (не Admin) выполнить:\nscoop install git\nscoop update\n\nscoop config aria2-enabled false\n\nscoop bucket add nerd-fonts\nscoop install nerd-fonts/IosevkaTerm-NF-Mono\nscoop install fd\nscoop install ripgrep\nscoop install fzf\nscoop install ccat\nscoop install btop\nscoop install wttop\nscoop install 7zip\nscoop install wget\nscoop install curl\nscoop install gcc\nscoop install gdb\nscoop install make\nscoop install cmake\nscoop install time\nscoop install busybox\nscoop install clipboard\nscoop install imagemagick\nscoop install ffmpeg\nscoop install handbrake-cli\nscoop install gnuplot\nscoop install openssh\n#scoop install cwrsync\nscoop install concfg\nscoop install neovim\n\nscoop install python\n\nscoop install winget\n\nscoop bucket add extras\nscoop install extras/winmerge"
  },
  {
    "objectID": "win11-for-engineers-manual.html#winget",
    "href": "win11-for-engineers-manual.html#winget",
    "title": "Руководство",
    "section": "2.2 Winget",
    "text": "2.2 Winget\nСписок доступных к установке программ:\nhttps://winstall.app/\nwinget уже должен быть установлен с помощью scoop:\nscoop install winget.\nУстанавливать программы из под пользователя, а не Admin!, при необходимости winget сам спросит права.\nwinget install --id=FarManager.FarManager -e\nwinget install --id=Hibbiki.Chromium -e\nwinget install --id=Mozilla.Firefox.ESR -e\nwinget install --id=Chocolatey.Chocolatey -e\nwinget install --id=OpenVPNTechnologies.OpenVPN -e\nwinget install --id=AutoHotkey.AutoHotkey -e\nwinget install --id=Microsoft.PowerShell -e\nwinget install --id=Microsoft.WindowsTerminal -e\nwinget install --id=nomacs.nomacs -e\nwinget install --id=xiaoyifang.GoldenDict-ng -e\nwinget install --id=WinDirStat.WinDirStat -e\nwinget install --id=PuTTY.PuTTY -e\nwinget install --id=Telegram.TelegramDesktop -e\nwinget install --id=Meld.Meld -e\nwinget install --id=WinMerge.WinMerge -e\nwinget install --id=Qalculate.Qalculate -e\nwinget install --id=Rufus.Rufus -e\nwinget install --id=hluk.CopyQ -e\nwinget install --id=FreeCAD.FreeCAD -e\nwinget install --id=KDE.LabPlot -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#chocolatey",
    "href": "win11-for-engineers-manual.html#chocolatey",
    "title": "Руководство",
    "section": "2.3 Chocolatey",
    "text": "2.3 Chocolatey\nhttps://community.chocolatey.org/packages — каталог программ в Chocolatey.\nChocolatey уже был установлен с помощью winget:\nwinget install --id=Chocolatey.Chocolatey -e\nДля установки GUI для Chocolatey запустить в Admin терминале:\nchoco install -y chocolateygui\nNote: В настройках ChocolateyGUI (запускается уже из меню Start) лучше отключить вид в виде tiles/плиток — построчный показ удобнее.\nВ Chocolatey из терминала (так удобнее) — установить программы (Admin!):\nchoco install -y vcredist-all\nchoco install -y reflect-free\nchoco install -y vcxsrv\nNote: В консольных терминалах для выполнения программ под правами Admin следует вставлять sudo перед командой, например: sudo choco install -y vcredist-all.\nВ ChocolateyGUI, в репозитории, эти программы также можно найти и установить вручную:\n\nMicrosoft Visual C++ Runtime - all versions\nMacrium Reflect\nVcXsrv Windows X Server"
  },
  {
    "objectID": "win11-for-engineers-manual.html#обновление-update-всех-установленных-в-windows-программ",
    "href": "win11-for-engineers-manual.html#обновление-update-всех-установленных-в-windows-программ",
    "title": "Руководство",
    "section": "2.4 Обновление (update) всех установленных в Windows программ",
    "text": "2.4 Обновление (update) всех установленных в Windows программ\nВсе менеджеры программ предоставляют возможность обновить все программы одной командой — для этого выполнить в терминале (не Admin!):\nscoop update --all\nsudo choco update all -y\nwinget update --all\n\nScoop может обновить только то, что он сам установил: scoop list. Вывести список обновляемого: scoop update. Обновить всё: scoop update --all.\nChocolatey может обновить только то, что он сам установил. В ChocolateyGUI при запуске он покажет, что можно обновить: нажать иконку-звёздочку. Обновить из CLI: sudo choco update all -y.\nWinget может обновить программы, которые были установлены и через winget, и через Chocolatey, список установленного: winget list, при наличии обновления эта команда укажет новую версию; либо, сразу показать список с доступными обновлениями: winget update. Обновить всё: winget update --all.\n\nNote: Есть утилита, topgrade, которая апдейтит абсолютно всё: обновления Windows, драйвера, прошивки, scoop/choco/winget программы, всё вплоть до плагинов VSCode. Перед применением обязательно сделать бекап (например с помощью MacriumReflect), иначе, topgrade порой такое обновляет, что совсем не радует, например, до последнего обновления Win11. По хорошему, topgrade необходимо сначала поконфигурить, что обновлять, а что нет, и только потом запускать. Установка: scoop install topgrade, запуск: topgrade."
  },
  {
    "objectID": "win11-for-engineers-manual.html#некоторые-программы-и-утилиты",
    "href": "win11-for-engineers-manual.html#некоторые-программы-и-утилиты",
    "title": "Руководство",
    "section": "2.5 Некоторые программы и утилиты",
    "text": "2.5 Некоторые программы и утилиты\nНесколько параграфов о разных программах и утилитах, которые не требуют подробного описания установки или использования. Большинство из них были в списках установки выше, т.е. уже были установлены.\n\n2.5.1 Программы для картинок\nnomacs — программа для просмотра изображений; а также для их модификации, с широчайшими возможностями: конвертация, масштабирование, вращение, обрезка, работа с цветом, баланс белого, работа с raw форматами, интерактивная обработка нескольких изображений синхронно. Конечно, не фотошоп, но для обычной работы с картинками 99% необходимого функционала обеспечивает.\nwinget install --id=nomacs.nomacs -e\nGimp — opensource замена фотошопу; программа для тех, кому не достаточно возможностей nomacs.\nwinget install --id=GIMP.GIMP -e\n\n\n2.5.2 pdf-viewer\nЕсли бы не было просмотра pdf в каждом браузере, то можно было бы установить Sumatra PDF:\nwinget install --id=SumatraPDF.SumatraPDF -e\nно сейчас это уже излишне.\n\n\n2.5.3 Программки для работы с текстом\nОфисные программы рассмотрены в отдельной главе Офисные Пакеты. Написание программных кодов предполагается в VSCode, настройка которого рассмотрена в отдельной главе.\n\nNotepad++ — легковесная замена блокнота, ультраэдита, и проч., с подсветкой синтаксиса, широкими возможностями редактирования. Устанавливается: scoop install extras/notepadplusplus.\nMeld и WinMerge — это программы для сравнения и редактирования файлов бок о бок, наиболее популярные из открытых. Используются, в том числе, для разрешения конфликтов при слияниях git. Устанавливаются, соответственно: winget install --id=Meld.Meld -e и scoop install extras/winmerge.\nGoldenDict-ng — локальные словари для перевода. По умолчанию активируется (переводит) по двойному нажатию на &lt;Ctrl+C&gt;. Устанавливается так: winget install --id=xiaoyifang.GoldenDict-ng -e; но при установке никаких словарей не ставится, их необходимо дополнительно скачать и указать программе где они, скачанные, лежат. Свободные словари:\n\ndict-freedict-eng-rus - English-Russian dictionary for the dict server/client\nmueller7-dict - Mueller English/Russian dictionary in dict format\n&lt;TBD&gt;\n\n\n\n\n2.5.4 Утилиты для работы с дисками\n\nWinDirStat — утилита для контроля занимаемого места файлами на диске, показывает размер файлов в виде плиток. Установка: winget install --id=WinDirStat.WinDirStat -e\nRufus — утилита для создания загрузочных флешек, для установки операционных систем Windows, Linux и пр. Установка: winget install --id=Rufus.Rufus -e.\nGSmartControl — утилита для получения информации S.M.A.R.T. SSD/HDD, в частности, для контроля истирания SSD. Установка: winget install --id=AlexanderShaduri.GSmartControl -e\nобновление прошивок SSD:\n\nSamsung: sudo choco install -y samsung-magician\nIntel: winget install --id=Solidigm.StorageTool -e\nTranscend: winget install --id=TransendInfo.SSDScopeApp -e\nKingston: winget install --id=Kingston.SSDManager -e\nMicron, 2: sudo choco install -y micron-storage-executive\nCrucial: winget install --id=Crucial.StorageExecutive -e\nWD: winget install --id=WesternDigital.Dashboard -e\n\n\n\n\n2.5.5 Прочие системные утилиты\n\nдля ноутбуков Lenovo есть утилита Lenovo System Update, которая может скачать/обновить BIOS и специфичные драйвера для Windows. Установка: winget install --id=Lenovo.SystemUpdate -e. Ещё вариант.\nдля ноутбуков Huawei есть утилита PC Clone для копирования системы с/на другие компьютеры и ноутбуки. Копирование происходит: а) копированием всех файлов пользователя, б) установкой соответствующих программ на другом компьютере и копировании данных для каждой из этих программ (поддерживается ограниченный список программ). Должна работать не только с Huawei.\nFanControl — утилита для настройки скорости вращения вентиляторов, актуально для ноутбуков, подходит не для всех ноутбуков, особенно свежих моделей; установка: winget install --id=Rem0o.FanControl -e.\n\n\n\n2.5.6 Драйвера\nЕсли какое-то устройство не работает, или знаки вопроса в Device Manager, то можно попробовать поставить драйвера (без гарантии что заработает и ничего не сломается, и сначала сделать бэкап).\nHW-Info — бесплатная проприетарная утилита, выводит список наличных аппаратных устройств:\nwinget install --id=REALiX.HWiNFO -e\nSDIO https://www.snappy-driver-installer.org/1 — Установщик драйверов:\nwinget install --id=samlab-ws.SnappyDriverInstaller -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#backup-операционной-системы-windows",
    "href": "win11-for-engineers-manual.html#backup-операционной-системы-windows",
    "title": "Руководство",
    "section": "2.6 Backup операционной системы Windows",
    "text": "2.6 Backup операционной системы Windows\nРезервное копирование систем Windows удобно делать используя программу MacriumReflect — это проприетарная программа, но бесплатная для персонального использования. Программа должна была быть установлена через Chocolatey (см. выше):\nsudo choco install -y reflect-free\n\n2.6.1 Особенности использования MacriumReflect\nПри первом бэкапе будет создан шаблон, который, в дальнейшем, можно будет запускать безо всех этих шагов с указанием пути, имени, и т.п. Шаблон во втором табе/вкладке.\nДля возможности восстановления из бэкапов необходимо создать загрузочную запись, либо на флешке, либо на самом диске с установленной операционной системой. Это делается в меню Other Tasks &gt; Create Rescue Media.\nВ меню Other Tasks &gt; Edit Defaults and Settings &gt; Update Settings отключить проверку обновлений — очень часто обновляется, будет раздражать. Рядом в Backup Defaults &gt; Retension Rules, стоит отключить автоматическое удаление старых бэкапов.\n\n\n2.6.2 duplicati\n&lt;TBD&gt;\nOpen-source program, with VSS support!\nhttps://duplicati.com/ https://docs.duplicati.com/\nwinget install --id=Duplicati.Duplicati  -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#браузеры",
    "href": "win11-for-engineers-manual.html#браузеры",
    "title": "Руководство",
    "section": "2.7 Браузеры",
    "text": "2.7 Браузеры\nНаиболее широко распространённые браузеры: Chromium (Chrome), Firefox, Edge, Brave. Chrome, Edge, Brave созданы на основе Chromium, Firefox — отдельная разработка. Все браузеры примерно равны, и у всех есть возможность установки наиболее востребованных плагинов. Edge и Chrome по умолчанию следят за пользователями, Chromium и Firefox не следят (так как их исходный код доступен и любой желающий параноик в этом может убедиться), но Edge и Chrome наиболее массовые браузеры, и, поэтому, наиболее протестированные и защищённые. На сегодняшний день для повседневной работы с не конфидициальными данными, в Windows вполне обосновано применять Edge (с установленным плагином UBlock Origin, и настройками, запрещающими отправку данных в Edge &gt; Settings &gt; Privacy, Search and Services:).\nОсобенности использования современных браузеров:\n\nUBlock Origin. “Must have” для всех браузеров, без вариантов! Edge, Chrome/Chromium, Firefox. После установки плагина в настройках дополнительно включить фильтр Ru в настройках плагина в табе Filter lists в самом низу в Regions, languages.\nNoScript. Во всех браузерах есть NoScript плагин, который разрешает запуск каких-либо .js-скриптов только по белому списку, т.е. никакие сторонние скрипты никогда не запустятся, если только их не разрешить явно. Одно из следствий работы этого плагина, состоит в том, что, если явно не разрешать работу js-скриптов, которые отвечают за локацию местоположения пользователя, то начинают работать те сайты, которые ограничивают доступ для пользователей из России.\nВ Firefox есть встроенный менеджер паролей, защищённый Мастер Паролем, т.е. Firefox не позволяет посмотреть сохранённые пароли и реквизиты банковских карт пока не будет введён Мастер Пароль. У Chromium (Chrome, Edge) нет такой возможности — они позволяют любому посмотреть все сохранённые пароли. /Параноик Mode Off.\n\nПримерный список плагинов приведён в конце параграфа на примере Chromium.\nДалее рассмотрим некоторые варианты использования браузеров, учитывающие их особенности.\n\n2.7.1 Конфиденциальные данные\nУстановить FirefoxESR: winget install --id=Mozilla.Firefox.ESR -e, установить МастерПароль, установить NoScript, U-Block Origin. Этот браузер будет для работы с конфиденциальными данными, для работы: с почтой, банковскими сайтами, и т.п. Поначалу придётся много раз добавлять сайты в разрешённые в NoScript, но их всё же ограниченное число.\n\n\n2.7.2 Обычное использование интернета\nУстановить один из браузеров для работы по умолчанию (кроме уже задействованного FirefoxESR). Установить в нём все плагины, кроме NoScript.\n\n\n2.7.3 Песочница\nBrave позиционируется как наиболее защищённый браузер, и он может использоваться в качестве “песочницы”. winget install --id=Brave.Brave -e. В настройках в brave://settings/shields включить Aggresive в Trackers & ads blocking, и включить Block Scripts. В последующем использовании разрешать скрипты по очереди — иконка щита справа от адресной строки. В браузере ни в коем случае не сохранять логинов и паролей. Тогда в этом браузере можно абсолютно безопасно посещать любые недостоверенные сайты, и это не приведёт ни к компрометации данных, ни к вирусам. Также в Brave могут открываться некоторые сайты, которые в других браузерах не открываются из-за санкций.\n\n\n2.7.4 Примерный набор плагинов\nдля браузера Chromium:\nuBlock Origin\nOpen Tabs Next to Current\nQR Code Generator\nEnable right click\nHistory Trends Unlimited\nThe Marvellous Suspender\nUnpaywall\nДля того, чтобы открывались подсанкционные сайты, например netlib.org — сайт математической библиотеки LAPACK, можно попробовать следующие плагины:\nRunet Censorship Bypass\nSnowflake\nЕсть плагин uBlacklist, который позволяет исключить из выдачи поисковиков (google.com и т.д.) некоторые сайты — заблокировать их от показа."
  },
  {
    "objectID": "win11-for-engineers-manual.html#far-manager-и-консольный-терминал",
    "href": "win11-for-engineers-manual.html#far-manager-и-консольный-терминал",
    "title": "Руководство",
    "section": "2.8 Far Manager и консольный терминал",
    "text": "2.8 Far Manager и консольный терминал\n\n2.8.1 Нулевой уровень сложности настройки\nЕсли Far ещё не установлен, то установить:\nscoop install 7zip\nwinget install --id=FarManager.FarManager -e\nNote: Поменять шрифты можно кликнув правой кнопкой мыши на иконке Far, в свойствах.\nNote: В Far’е можно открывать ssh-соединения с поддержкой X11 приложений, для этого в окне терминала Far (Ctrl+O) вызвать две команды:\nset DISPLAY=127.0.0.1:0.0\nssh -X somename@somehost\n\n\n2.8.2 Второй уровень сложности\nЗапускать Far в WindowsTerminal, в котором можно настроить цвета/палитры, шрифты и т.п.\nУстановить Far и WindowsTerminal:\nscoop install 7zip\nwinget install --id=FarManager.FarManager -e\nwinget install --id=Microsoft.WindowsTerminal -e\n\n2.8.2.1 Настройка Windows Terminal\n\nДобавить профиль для запуска Far: открыть WindowsTerminal Settings, в меню слева выбрать (внизу) + Add a new profile, нажать + New empty profle, задать имя профиля Far, в пункте Command line задать выполняемую команду, выбрав файл “C:\\Program Flies\\Far Manager\\Far.exe”, в пункте Starting directory отжать галочку (станет %USERPROFILE%), для отображения иконки выбрать тот же самый “C:\\Program Flies\\Far Manager\\Far.exe” – иконка будет браться непосредственно из .exe; сохранить. Выбрать профиль Far для старта: в меню Settings самый первый пункт. (Всё то же самое можно сделать через редактирование файла конфигурации settings.json, подробнее чуть ниже в Пункте про схемы)\nНастроить запуск WindowsTerminal по умолчанию для всех консольных команд и приложений: в настройках Windows в Settings &gt; Update & Security &gt; For developers: Terminal &gt; Windows Terminal.\nТема оформления, Шрифт, Форма курсора, меняются в настройках WindowsTerminal в Settings &gt; Defaults &gt; Appearance – это будут настройки по умолчанию для всех новых типов терминалов. Эти настройки можно будет изменить для каждого профиля терминала отдельно.\nЧастоту мигания курсора можно изменить только глобально в настройках Windows: Change cursor blinking rate.\nВ Windows Terminal для создания ssh-соединения (с поддержкой X11 приложений) вызвать следующую команду прямо из cmd (clink) сессии:\nset DISPLAY=127.0.0.1:0.0& ssh -X somename@somehost\nМожно настроить отдельный профиль для фиксированного ssh-соединения, чтобы сразу открывалась новая ssh-сессия при открытии профиля. Для этого сдублировать профиль cmd.exe, с такой командой:\ncmd.exe /c set DISPLAY=127.0.0.1:0.0& ssh -X somename@somehost\nПеременную DISPLAY можно установить перманентно в пользовательских переменных среды окружения командой:\nsetx DISPLAY 127.0.0.1:0.0\nИспользовать PuTTY в Windows Terminal: для того, чтобы PuTTY открывал соединение и показывал всё в Windows Terminal, необходимо настроить новый профиль, в котором будет вызываться загрузка соответствующего профиля PuTTY командой \"plink.exe -load \\\"putty-session\\\"\". (Команда C:\\Program Files\\PuTTY\\plink.exe, это программа, которая осуществляет непосредственное соединение для PuTTY, с поддержкой ключей и Pageant.) Но Windows Terminal очень плохо поддерживает plink.exe, поэтому многие клавиши (стрелки) работать не будут.\nДополнительные цветовые схемы см. в https://github.com/mbadolato/iTerm2-Color-Schemes или https://windowsterminalthemes.dev/. Установка дополнительных схем осуществляется вставкой соответствующего json-фрагмента настроек цветовой схемы в секцию \"schemes\": в общей конфигурации WindowsTerminal settings.json, которая открывается для редактирования по нажатию на “Шестерёнку” в левом нижнем углу в меню Settings.\nПросмотреть цвета текущей схемы можно командой: colortool -c, которая устанавливается: scoop install colortool.\nДля того, чтобы Far показывал другие цветовые схемы помимо синей, необходимо отжать галочку в меню Far: F9 &gt; Options &gt; Colors: Palette &gt; Classic Palette: Off.\nИз не синих схем интересна схема Glacier, например.\nДля автоматического копирования в буфер обмена выделенного мышкой включить опцию Settings &gt; Interaction: Automatically copy selection to clipboard. &lt;new-01&gt;\nНе показывать Warning на multiline paste: добавить строчку \"multiLinePasteWarning\": false, в самый верх (на первый уровень) конфига settings.json.\nКомбинации Ctrl+C, Ctrl+V, Ctrl+W, Ctrl+T для доступности в консольных приложениях следует перенастроить (в настройках в Settings &gt; Actions) на варианты с Shift, т.е.: Ctrl+Shift+C, Ctrl+Shift+V, Ctrl+Shift+W, Ctrl+Shift+T и т.п.\nДля показа иконок в Taskbar’е в Windows должна быть включена опция Show badges on taskbar buttons в Settings &gt; Personalization &gt; Taskbar.\nОдним из интересных вариантов интеграции WindowsTerminal в Windows будет настройка Панели задач (Taskbar) без группировки окон — чтобы каждый терминал был в отдельном окне Windows; при этом надо установить опции для открытия каждого терминала в новом окне в Settings &gt; Startup &gt; New instance behavior: Create a new window.\nДля полнотекстового поиска по файлам, docx, pdf и т.п. смотри далее раздел RipGrep.\nПривычную переменную HOME можно задать в переменных среды окружения для пользователя выполнив:\nsetx HOME \"%UserProfile%\"\nАлиасы. Для каждой оболочки свои методы создания:\n\n&lt;TBD&gt; https://stackoverflow.com/questions/17404165/how-to-run-a-command-on-command-prompt-startup-in-windows https://superuser.com/questions/1134368/create-permanent-doskey-in-windows-cmd\nДля PowerShell: Guide как задать постоянные алиасы в профиле PS.\n\nУ WindowsTerminal есть возможность настроить глобальную горячую клавишу на вызов WindowsTerminal откуда угодно. Для этого в settings.json прописать команду \"globalSummon\" в разделе \"actions\"::\n\"actions\": [\n  {\n    \"command\": {\n      \"action\": \"globalSummon\"\n    },\n    \"keys\": \"alt+t\"\n  }\n]\nДля WindowsTerminal доступны некоторые параметры запуска из командной строки, например, можно настроить открывать отдельный WindowsTerminal (новое окно) на запуск какого-то конкретного приложения, со специально настроенным профилем, например, создать алиас doskey vi=wt -d %CD% -p \"wt-nvim\" -- nvim $* и профиль с именем “wt-nvim” с командой %SystemRoot%\\System32\\cmd.exe /c nvim, тогда по команде vi test-01.cpp откроется новое окно с WindowsTerminal с открытым файлом test-01.cpp в редакторе nvim.\nСписок всех действий WindowsTerminal, любое из них можно настроить на желаемую комбинацию клавиш.\n\n\n\n2.8.2.2 Использование WindowsTerminal\nСм. также главу Полезные консольные утилитки.\n&lt;TBD&gt;\nВозможности WindowsTerminal.\n\nCtrl-Shift-P — открыть Command Palette — панель действий\nCtrl+Shift+T — открыть новую вкладку с терминалом по умолчанию\nCtrl+Shift+N — открыть новое окно с терминалом по умолчанию\nCtrl+Shift+Space — открыть селектор открытия новой вкладки\nCtrl+Alt+1 — переключиться на первую вкладку\nCtrl+Alt+2 — переключиться на вторую вкладку\nCtrl+Shift+1 — открыть новую вкладку с профилем 0\nCtrl+Shift+2 — открыть новую вкладку с профилем 1\n\nWindowsTerminal умеет открывать терминалы не только в табах, но и панелях, т.е. в одном окне несколько терминалов, расположенных плиткой.\nСписок всех действий WindowsTerminal, любое из них можно настроить на желаемую комбинацию клавиш.\nLinks: WT by MS, WT actions, doskey, Guide.\n\n\n\n2.8.3 Финальный уровень сложности\nВ принципе, на этом можно и остановиться, но для полноценной разработки/программирования рекомендуется установить и настроить нормальную командную оболочку (shell) Clink.\nВ Приложении показана настройка Clink.\nПосле установки и настройки Clink останется только настроить для него профиль в WindowsTerminal, который проще всего получить сдублировав профиль для cmd.exe, после чего, в новом профиле, в качестве запускаемой команды прописать:\n%SystemRoot%\\System32\\cmd.exe /k \"clink inject\"\nТак же в Приложении есть краткая справка по использованию оболочки Clink.\nСм. также главу Полезные консольные утилитки.\n\n\n2.8.4 Отступление про Шрифты\nПри постоянном использовании консольных приложений одним из ключевых факторов эргономики являются шрифты. Не стоит пренебрегать шрифтами, времени много не займёт, а удобство повысит.\nДля консольных приложений используются моноширинные шрифты. Посмотреть наиболее популярные бесплатные шрифты можно на сайте https://www.nerdfonts.com/font-downloads.\nДля улучшения читабельности длинных строк можно использовать сжатые (condensed, compressed, narrow) шрифты, это шрифты, которые более высокие, чем широкие. Примеры сжатых шрифтов: Iosevka(view), D2CodingLigature(view).\nВ последние годы в консольных программах стали широко использоваться шрифты с иконками, смайликами, и прочими стрелочками. Проект https://www.nerdfonts.com/ добавляет набор иконок к любым шрифтам. При установке шрифтов, при прочих равных, следует выбирать версию Nerd Font, если есть в наличии.\nВсе, или почти все, шрифты можно установить через Scoop. Поиск шрифта, установка шрифта:\nscoop bucket add nerd-fonts\nscoop install nerd-fonts/Iosevka-NF-Mono"
  },
  {
    "objectID": "win11-for-engineers-manual.html#многокарманный-буфер-обмена",
    "href": "win11-for-engineers-manual.html#многокарманный-буфер-обмена",
    "title": "Руководство",
    "section": "2.9 Многокарманный буфер обмена",
    "text": "2.9 Многокарманный буфер обмена\nCopyQ — многокарманный буфер обмена. Note: хоть в Windows и есть встроенный многокарманный буфер, но он очищается при перезагрузке, поэтому его невозможно использовать как некую временную “записную книжку” с сохранёнными фрагментами текста.\nCopyQ поддерживает несколько списков хранения, позволяет исправлять (редактировать) хранимые фрагменты текста, поддерживает темы оформления, кросплатформенный.\nУстановка:\nwinget install --id=hluk.CopyQ -e\nДля автозапуска CopyQ при загрузке Windows, необходимо скопировать ссылку на CopyQ в папку автозапуска, для этого в меню Start правой кнопкой по нему выбрать Open file location, скопировать ярлык, и Paste его в папку автозапуска, открываемую по команде shell:startup в строке запуска &lt;Win+R&gt;.\nНастройка:\n\n&lt;Win+V&gt; занят встроенным в Windows буфером обмена, поэтому, на вызов CopyQ можно назначить сочетание клавиш &lt;Alt+V&gt; в Preferences &gt; Shortcuts &gt; Globals: Show/Hide main window;\nв настройках Preferences &gt; History увеличить количество хранимых заметок до 10000;\nв настройках Preferences &gt; Items &gt; Images увеличить максимальный хранимый размер изображений до 2560 на 1600;\nпри копировании в буфер форматированного текста (rich text) из Word или html, форматирование сохраняется. Эту особенность можно отключить в Preferences &gt; Items &gt; Text. Или настроить Paste as plain text в Shortcuts.\n\nЕще есть многокарманный буфер Ditto, если CopyQ чем-то не устроит, установка."
  },
  {
    "objectID": "win11-for-engineers-manual.html#системы-виртуализации-wsl-и-docker",
    "href": "win11-for-engineers-manual.html#системы-виртуализации-wsl-и-docker",
    "title": "Руководство",
    "section": "2.10 Системы виртуализации WSL и Docker",
    "text": "2.10 Системы виртуализации WSL и Docker\nWSL требуется для программирования: для компиляции и отладки программ. Docker необходим для установки некоторых сложных приложений (OpenFOAM).\n\n2.10.1 WSL\nWSL — Windows Subsystem for Linux, это встроенная в Windows система виртуализации, позволяющая запускать Linux приложения непосредственно в Windows.\nСначала установить WSL2, для этого в терминале (Admin) запустить:\nwsl --install\nВ процессе установки Ubuntu установить набор пакетов для программирования:\nsudo apt update\nsudo apt install aptitude mc bash-completion neovim wget curl \\\n         ca-certificates git build-essential gfortran libopenmpi-dev \\\n         mpi-default-bin libopenblas-dev libopenblas-openmp-dev \\\n         libhypre-dev liblapack-dev liblapack-doc libhdf5-mpi-dev \\\n         libscotch-dev petsc-dev libsuitesparse-dev libsuperlu-dev \\\n         libsuperlu-dist-dev fortran-language-server gdb \\\n         python3 python3-pip ripgrep fzf fd-find parallel\nДля запуска терминала с WSL запускать WSL или Ubuntu.exe из меню Start/Пуск; другой вариант — запуск команды wsl из Cmd/PowerShell; и, самый лучший вариант, это запуск в отдельном терминале в WindowsTerminal (сам автоматически настроится при установке WSL), или запуск в отдельном терминале в Cmder (настраивается автоматически в Cmder по Setup Tasks &gt; Add/refresh default tasks).\nNote: Ubuntu.exe — это alias — Windows автоматически создаёт такие ссылки для каждой WSL системы для быстрого доступа/запуска.\nNote: установленные в WSL2 графические Linux приложения работают “из коробки”.\n\n2.10.1.1 WSL Manager\nСуществуют графические утилиты для управления WSL контейнерами, одна из них WSLManager; установка:\nwinget install --id=Bostrot.WSLManager -e\n\n\nОтступление про использование WSL:\nАргументы some commands после слова wsl в команде wsl some commands будут запущены внутри WSL виртуалки: например, команда wsl rg \"some-phrase\" запустит Linux утилиту rg, которая, в данном случае, будет выполнять полнотекстовый поиск “some-phrase” в текущей папке. Т.е. в любом терминале Windows можно выполнить команду Linux, в том числе для действий над своими файлами/данными лежащими на локальных дисках C:, D: и т.п.\nАналогично, скомпилировать программу из исходного кода, с использованием библиотеки OpenMPI:\nwsl mpif90 -g -o test test.f\nЗапустить скомпилированную параллельную программу в параллельном режиме:\nwsl mpirun -n 4 ./test\nЗапустить отладку скомпилированной программы:\nwsl gdb test\nВ итоге, в Windows более не требуется сложная процедура установки компиляторов, библиотек, прописывания путей, и т.п. — это всё делается в Linux, который лучше для этого приспособлен.\n\n\n\n2.10.2 Docker\nDocker — это менеджер виртуальных машин; сам он не выполняет виртуальные машины, а только занимается организацией создания, хранения, и запуска машин с помощью других систем виртуализации, например, таких как WSL. Поэтому, устанавливать Docker следует только после установки WSL.\nУстановка:\nwinget install --id=Docker.DockerDesktop -e\nПро установку и запуск виртуальных машин в Docker см. далее в Дополнительных материалах."
  },
  {
    "objectID": "win11-for-engineers-manual.html#sshputty",
    "href": "win11-for-engineers-manual.html#sshputty",
    "title": "Руководство",
    "section": "2.11 ssh/PuTTY",
    "text": "2.11 ssh/PuTTY\nВ Windows для удалённого доступа по протоколу ssh могут использоваться Putty и OpenSSH. Оба пакета выполняют один функционал. OpenSSH запускается в окне консольного теминала WindowsTerminal/Cmder/Conemu, поэтому в нём доступны все клавиши навигации, настроенные шрифты и цветовая схема. У Putty свой графический терминал с небольшим числом возможностей и настроек. В Windows выбор между Putty и OpenSSH определяется привычкой и удобством использования, по качеству ssh-соединения они одинаковы.\nДокументация по настройке ssh/Putty на Windows: SSH-on-Windows, Integrate-SSH-Agent-or-PuTTY-Agent.\nNote: В Windows имеется встроенный OpenSSH, но из-за ANSI несовместимости его нельзя применять в терминалах Cmder/Conemu, поэтому потребуется ещё установить нормальный OpenSSH.\nУстановить оба, и OpenSSH, и Putty:\nscoop install openssh\nwinget install --id=PuTTY.PuTTY -e\nДля настройки входа без пароля потребуется добавить свой публичный (.pub) ключик к файлу ~/.ssh/authorized_keys на удалённом узле (хосте); далее рассмотрены оба варианта, и для OpenSSH и для Putty.\n\n2.11.1 Вариант для OpenSSH соединения\nИнструкция:\n\nПосмотреть содержимое папки в домашней директории на Windows %UserProfile%\\.ssh на наличие уже созданных ключей, если там есть пара файлов id_SOMEPROTOCOL и id_SOMEPROTOCOL.pub, то ключи уже созданы и перейти к следующему шагу, иначе создать их командой:\nssh-keygen\nпонажимать Enter, и ключи готовы.\nСкопировать ключ на удалённый хост:\nssh-copy-id user@hostname\n\n\n\n2.11.2 Вариант для Putty соединения\nИнструкция тут посложнее:\n\nОткрыть из меню Start PuTTYgen, сгенерировать ключ, сохранить обе части – public/private.\nВыделить открытую часть и скопировать в буфер обмена, чтобы добавить в файл .ssh/authorized_keys на Linux, для чего зайти на Linux через Putty, и выполнить:\ncd ~/.ssh\nvi authorized_keys\nДалее процесс добавления ключа из буфера обмена в открытый в vi файл: набрать на клавиатуре команду:\nGo&lt;Shift+Insert&gt;&lt;Esc&gt;:wq\nздесь &lt;Shift+Insert&gt; и &lt;Esc&gt; — это клавиатурные комбинации, а не строчки которые вводить.\n(Note: паблик ключ должен иметь форму одной строки, если это не так, то лишние переводы строки необходимо стереть: в vi это делается командой Shift+J, которая объединяет текущую и следующую строки; этой командой можно воспользоваться после &lt;Esc&gt;, перед :wq.)\nПоправить права доступа (на всякий случай):\nchmod 600 authorized_keys\nМожно выходить из сессии: exit == Ctrl+D.\nТеперь добавить ключ в Putty для использования: запустить из Start Pageant. Правой кнопкой мышки в трее на иконке Pageant кликнуть и указать Add key, выбрать сохранённый приватный ключ .ppk. Чтобы вход по ключам всегда срабатывал, потребуется настроить автозапуск Pageant: скопировать ссылку на Pageant в папку автозапуска, для этого в меню Start правой кнопкой по нему выбрать Open file location, скопировать ярлык, и Paste его в папку автозапуска, открываемую по shell:startup в &lt;Win+R&gt;.\n\n\n\n2.11.3 Конвертация ключей Putty в формат ssh\nФормат хранения ключей у Putty отличается от формата ssh. Для того, чтобы сохранить в нормальном формате, у Putty, в утилите генерации ключей C:\\Program Files\\PuTTY\\puttygen.exe, есть менюшка Conversions &gt; Export OpenSSH key (force new file format), которая сохраняет приватный ключ в формате ssh (сохранять в файл без расширения, в id_rsa). Формат .pub ключа идентичен нормальному, его конвертировать не потребуется. Эти два файла: id_rsa и id_rsa.pub, скопировать в папку %UserProfile%\\.ssh, после чего ssh начнёт их видеть."
  },
  {
    "objectID": "win11-for-engineers-manual.html#x-server",
    "href": "win11-for-engineers-manual.html#x-server",
    "title": "Руководство",
    "section": "2.12 X-server",
    "text": "2.12 X-server\nУстановленный WSL несёт в себе “нативный” X-server, он работает, его можно использовать, но его производительность заметно ниже, чем у VcXsrv. Поэтому, установить VcXsrv:\nsudo choco install -y vcxsrv\nNote: VcXsrv запускается командой XLaunch из меню Пуск.\nNote: При возникновении ошибок X-Authority при соединении, можно попробовать отключить контроль безопасности: для этого при запуске XLaunch (VcXsrv) поставить галочку “Disable Access Control”, это приведёт к разрешению на запуск графических приложений с любого удалённого узла.\n\n2.12.1 OpenSSH\nДля создания ssh-соединения в OpenSSH выполнить в cmd/Clink/Far:\nset DISPLAY=127.0.0.1:0.0\nssh -X somename@somehost\nтогда проброс (Forwarding) протокола X11 заработает (Guide).\nНенужные пояснения:\n\nЗдесь 127.0.0.1:0.0 — это IP-адрес localhost’а, на котором наш запущенный локальный X-сервер ожидает данных, и указание на номер дисплея (0.0) X-сервера. Здесь применяется явный IP-адрес, а не имя localhost, потому что последний может быть и IPv6.\nОпция -X (или -Y) указывает утилите ssh на создание X-Forwarding. -X — это вариант опции со включёнными ограничениями безопасности; -Y означает, что X11 приложение будет иметь полный доступ к отображаемому на локальном мониторе, этого варианта следует избегать, или применять только для доверенных удалённых хостов и доверенных X11 приложений.\n\n\n\n2.12.2 PuTTY\nПри создании ssh-соединения через Putty, для возможности запуска графических приложений по протоколу X11, в настройках Putty необходимо устанавливать галочку X-Forwarding (эквивалентно опции -X/-Y у ssh).\n\n\n2.12.3 Тест\nПосле настройки X сервера проверить его работоспособность можно парочкой утилит: xclock — простые часы с циферблатом, и glxgears — OpenGL программка из пакета mesa-utils.\n\nОтступление: Когда графическое приложение отрисовывается по X11 протоколу, оно отправляет “команды отрисовки” на локальный X-сервер, т.е отправляет не картинку, а инструкции как эту картинку рисовать. В общем случае, эти X11 инструкции имеют полный доступ к экрану и могут считывать всё его содержимое. Поэтому, для безопасности, в X-серверах, по умолчанию, включён режим “X11 SECURITY extension”, когда может применяться только ограниченный набор X11 команд, которые не имеют доступа к экрану. Но, некоторые X11 приложения, для полноценной работы, не могут ограничиться таким урезанным набором X11 команд, и, для них была введена опция -Y, отключающая ограничения “X11 SECURITY extension”. Эту опцию следует применять только в случае, если необходимое приложение, которому вы доверяете, без неё не работает."
  },
  {
    "objectID": "win11-for-engineers-manual.html#удалённый-рабочий-стол",
    "href": "win11-for-engineers-manual.html#удалённый-рабочий-стол",
    "title": "Руководство",
    "section": "2.13 Удалённый рабочий стол",
    "text": "2.13 Удалённый рабочий стол\nПомимо привычного RDP — Remote Desktop Protocol, существуют несколько инструментов для удалённого подсоединения, с более удобным и широким функционалом, которые могут проходить через интернет.\n&lt;TBD&gt;\nОдин из них, это кроссплатформенный RustDesk, позволяющий подсоединяться к рабочему столу компьютера в локальной сети. Также, через выделенный сервер, возможен коннект к любому компьютеру через интернет, без необходимости VPN. Установка:\nwinget install --id=RustDesk.RustDesk -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#openvpn",
    "href": "win11-for-engineers-manual.html#openvpn",
    "title": "Руководство",
    "section": "2.14 OpenVPN",
    "text": "2.14 OpenVPN\nOpenVPN.\nwinget install --id=OpenVPNTechnologies.OpenVPN -e\nНастройка: Проще всего скопировать ключи прямо вместе с их папкой, в “C:\\Program Files\\OpenVPN\\config”. OpenVPN увидит их (после перезапуска?) и будет показывать в виде отдельной папки конфигурации (появится возможность выбирать из нескольких ключей).\n\nWarning: Ни в коем случае не пытаться загрузить ключи через меню интерфейса Import &gt; Import File…, потому что в этом случае будет скопирован только один файл из трёх!\n\n\nLegacy OpenVPN\nOpenVPN версии 2.6.xy не работает с более старыми ключами, т.к. в них изменились некоторые параметры (при использовании ключей в устаревшем формате появляется запрос на ввод пароля).\nПоэтому, либо скачать предыдущую версию 2.5.xy (2.5.10) с сайта https://openvpn.net/community-downloads/ и, после установки, зафиксировать эту версию командой\nwinget pin add OpenVPNTechnologies.OpenVPN, либо отредактировать .ovpn файл скачать ключики заново — они будут уже в новом формате."
  },
  {
    "objectID": "win11-for-engineers-manual.html#vscode",
    "href": "win11-for-engineers-manual.html#vscode",
    "title": "Руководство",
    "section": "3.1 VSCode",
    "text": "3.1 VSCode\nDocs, Getting started, Keybindings, Keybindings.pdf.\nЕсли VSCode ещё не установлен, то установить:\nwinget install --id=Microsoft.VisualStudioCode -e\nДля запуска компилятов и т.п. в Windows используется префикс wsl:\nwsl gfortran -g -o test test.f\nwsl gdb test\nVSCode умеет так запускать компиляторы и отладчики при помощи расширения WSL.\nДля начала работы, после установки расширения WSL, в Cmd/PS перейти в папку с проектом или исходным кодом программы, и запустить команду:\nwsl code .\ncode — это название исполняемого файла VSCode, она так называется. В результате выполнения команды запустится VSCode с открытой текущей папкой (.).\nNote: при таком опосредованном выполнении в WSL, VSCode расширения (extensions) будут устанавливаться в раздел плагинов WSL – в нижний список установленных расширений. Т.е. в VSCode будет два набора расширений, и, возможно, какие-то расширения будут установлены и там и там, например Python, который можно использовать как в WSL, так и локально с помощью нативного python.\nРасширение WSL запускает компилятор и пр. локально, непосредственно на компьютере. Существует вариант удалённой работы через ssh по сети — на кластер или внутрь виртуальных машин — делается это с помощью расширения Remote Development. Это расширение позволяет проводить удалённую работу/отладку с любого компьютера, в том числе через интернет, причём все настройки сохраняются на стороне удалённого сервера/виртуалки (в папке проекта .vscode), и проекты будут настроены одинаково с любого удалённого места доступа.\nNote: Профессиональные разработчики в своей работе применяют Docker, который позволяет для каждого запуска отладки создавать новый, эталонно настроенный контейнер (виртуалку), и уже с ним работать. Эта технология позволяет:\n\n\nиметь разные версии компиляторов, библиотек и настроек для отладки разных приложений;\nпроводить разработку и отладку на гарантированно одинаковом наборе исходных данных, без необходимости после каждого запуска вручную очищать и копировать данные;\nтакже, эта технология позволяет настроить Continuous Integration (CI) — сервис Непрерывной Интеграции, запускающий набор тестов для каждого изменения (commit) внесённого в исходный код."
  },
  {
    "objectID": "win11-for-engineers-manual.html#cc",
    "href": "win11-for-engineers-manual.html#cc",
    "title": "Руководство",
    "section": "3.2 C/C++",
    "text": "3.2 C/C++\nРасширение C/C++ для VSCode должно работать “из коробки”.\nДля удобства необходимо создать git репозиторий в папке проекта, тогда VSCode автоматически найдёт файлы, которые следует скомпилировать и отлаживать.\n\nОтладка в Windows\n&lt;TBD&gt;\ncd project\nwsl code .\n\n\nОтладка в Linux\nhttps://code.visualstudio.com/docs/editor/debugging\ncd project\ncode .\n\nПростой вариант\nДля запуска отладки надо ткнуть Breakpoint в коде (кликнуть левее номеров строк), и запустить из меню Run &gt; Start debugging (F5). VSCode скомпилирует файлы и запустит отладку.\n\n\nВариант посложнее\nДля отладки в каких-то более сложных случаях, например, когда требуется передать аргументы командной строки, потребуется создать:\nа) Build configuration, tasks.json.\nСоздать конфигурацию: Ctrl+Shift+P: Tasks: Configure Default Build Task &gt; gcc debug, откроется tasks.json, его просто сохранить. Скомпилировать: Ctrl+Shift+P: Tasks: Run Build Task (Ctrl+Shift+B)\nКонфигурация по умолчанию:\n{\n    \"tasks\": [\n        {\n            \"type\": \"cppbuild\",\n            \"label\": \"C/C++: gcc build active file\",\n            \"command\": \"/usr/bin/gcc\",\n            \"args\": [\n                \"-fdiagnostics-color=always\",\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}/${fileBasenameNoExtension}\"\n            ],\n            \"options\": {\n                \"cwd\": \"${fileDirname}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"detail\": \"Task generated by Debugger.\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\nб) сгенерировать и отредактировать файл настроек запуска отладки проекта launch.json: в панели слева открыть панель отладки (жучок с треугольником), нажать ссылку create a launch.json file, из выпадающего меню выбрать Launch C++, и отредактировать только что созданный launch.json. Изменить поля для имени и аргументов, например:\n\"program\": \"${workspaceFolder}/test\",\n\"args\": [\"mon-coordinates.csv\", \"1\", \"13\"],\n{\n    // https://code.visualstudio.com/docs/editor/debugging#_launch-configurations\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/test\",\n            \"args\": [\"mon-coordinates.csv\", \"1\", \"13\"],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                },\n                {\n                    \"description\": \"Set Disassembly Flavor to Intel\",\n                    \"text\": \"-gdb-set disassembly-flavor intel\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n\n\nNotes\nДля просмотра векторов в окошке Watch нажать + и набрать argv, 4, где 4 это длина просматриваемого участка вектора argv."
  },
  {
    "objectID": "win11-for-engineers-manual.html#python",
    "href": "win11-for-engineers-manual.html#python",
    "title": "Руководство",
    "section": "3.3 Python",
    "text": "3.3 Python\nНа Windows можно установить нативный компилятор Python и его библиотеки, без использования WSL.\nУ Python есть несколько менеджеров окружений, которые используются для разделения установленных пакетов на независимые “песочницы”, с тем, чтобы было возможно установить пакеты, которые имеют зависимости, конфликтующие с зависимостями других пакетов. Помимо встроенного в Python менеджера pip существует простой и удобный pipx. На практике, при установке широкоизвестных библиотек, лучше использовать стандартный метод pip install --upgrade some-python-library. Но если устанавливается Python-программа, особенно с большим числом зависимостей, то её лучше установить в отдельное окружение: pipx install some-python-app.\nУстановка python/pip:\nscoop install python\nПосле установки в консоли было выведено сообщение о возможности регистрации python для других приложений, и для этого предлагается выполнить reg-файл\n%UserProfile%\\scoop\\apps\\python\\current\\install-pep-514.reg, что стоит сделать.\nNote: после установки, для того, чтобы .py файлы стали запускаемыми (как .exe), необходимо ассоциировать их с\n%UserProfile%\\scoop\\apps\\python\\current\\python.exe, либо просто запустив и выбрав, либо через меню Choose a default app for each type of file в Пуск.\nNote: после установки Python, чтобы python-программы с расширением .py можно было запускать без добавки расширения (как не обязательно .exe), необходимо, чтобы расширение .py присутствовало в переменной окружения PATHEXT.\nУстановка pipx:\npython -m pip install --upgrade pipx\npipx ensurepath\nNote: после установки какой-либо python-программы с помощью pip или pipx, она будет в путях. Но, вполне возможно, что это будет python-скрипт без какого-либо расширения, ни .exe, ни .py (как на Linux). В таком случае необходимо сделать .exe ссылку на этот скрипт. Например, после установки python -m pip install --upgrade eg, создать ссылку: scoop shim add eg python.exe -- -m eg, здесь на ссылку eg.exe создаётся ассоциация python.exe -m eg, которая будет работать в Windows.\nСписки установленных пакетов библиотек и python-программ: pip list, pipx list.\nУстановить математические библиотеки:\npython -m pip install --upgrade numpy\npython -m pip install --upgrade plotly\npython -m pip install --upgrade numba\npython -m pip install --upgrade mpi4py\nwinget install --id=Microsoft.msmpisdk -e\nwinget install --id=Microsoft.msmpi -e\nNote: Здесь в списке присутствует библиотека numba, это JIT2 компилятор Python, применяемый для высокопроизводительных вычислений (HPC). С его помощью можно добиться скорости выполнения Python программ наравне с C/C++ или Fortran. Применение этой библиотеки совершенно тривиально: импортировать from numba import jit и добавить @jit перед определением своих функций def ....\nДля разработки на Python есть несколько вариантов IDE: VSCode, Spyder, Positron, проприетарный PyCharm.\n\nPython в VSCode\nVSCode рекомендуется как универсальная среда разработки, где освоив работу на каком-либо языке программирования, разработка на других языках уже не будет представлять сложности. Python в VSCode использовать не сложно.\nscoop install extras/vscode\nРасширение Python для VSCode позволяет выполнять участки кода по Shift+Enter. Также можно выполнять построчную отладку по Debug, Run, NextLine, EnterInto, и т.д.\n\n\nPython в Spyder\nВ Spyder всё настроено для Python “из коробки”. Основной упор сделан на Data Science: обработка данных на Python, построение графиков, статистика. По стилю работы похож на MatLab. При первом запуске проводится краткий обучающий тур основам использования.\nwinget install --id=Spyder.Spyder -e\nNote: При наличии HiDPI экрана в настройках для этого есть опция Tools &gt; Preferences &gt; Application: Interface &gt; Enable auto high DPI scaling.\n\n\nPython в Positron\nТак же для Data Science стоит попробовать Positron. Это VSCode, где встроили набор плагинов для обработки данных на Python/R и проч. По стилю работы очень похож на VSCode (что подкупает ненужностью изучения чего-то непохожего), но это пока проект в beta стадии, могут встречаться ошибки.\npython -m pip install --upgrade ipykernel\nscoop install extras/positron\n\n\n3.3.1 Блокноты на Python\nДля создания Интерактивных блокнотов (журналов) на Python следует предпочесть расширение Jupytext (вместо Jupyter), сохранённые файлы которого имеют нормальный .py формат со специально оформленными комментариями, а не какой-то непонятный JSON.\n&lt;TBD&gt; Подробнее об интерактивных блокнотах, реактивном программировании."
  },
  {
    "objectID": "win11-for-engineers-manual.html#fortran",
    "href": "win11-for-engineers-manual.html#fortran",
    "title": "Руководство",
    "section": "3.4 Fortran",
    "text": "3.4 Fortran\nCHECKME: &lt;TBD&gt;\ncd my-cool-fortran-project\nwsl code .\nУстановить расширение Modern Fortran, переключиться (Switch) на Pre-Release версию расширения.\nЕсли подсветка не заработала, то разрешить в настройках fortls (должен быть уже установлен fortran-language-server в WSL).\nДля компиляции потребуется файл настроек задач task.json:\nСоздать файл tasks.json для настройки компиляции: открыть командную палитру &lt;Ctrl+Shift+P&gt;, ввести Tasks: Configure Task, выбрать Create tasks.json file from template, выбрать Others, отредактировать на:\n{\n  // https://code.visualstudio.com/docs/editor/tasks#_custom-tasks\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"build\",\n      \"type\": \"shell\",\n      \"command\": \"gfortran\",\n      \"args\": [\n        \"-o\",\n        \"${workspaceFolder}/program\",\n        \"${file}\"\n      ],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"detail\": \"Generated task by VSCode\"\n    }\n  ]\n}\nДля отладки потребуется создать/отредактировать файл launch.json: &lt;Ctrl-Shift-P&gt;, Debug, Edit launch.json:\n{\n  // https://code.visualstudio.com/docs/editor/debugging#_launch-configurations\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"(gdb) Fortran\",\n      \"type\": \"cppdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/a.out\",\n      \"args\": [], // Possible input args for a.out\n      \"stopAtEntry\": false,\n      \"cwd\": \"${workspaceFolder}\",\n      \"environment\": [],\n      \"externalConsole\": false,\n      \"MIMode\": \"gdb\",\n      \"setupCommands\": [\n        {\n          \"description\": \"Enable pretty-printing for gdb\",\n          \"text\": \"-enable-pretty-printing\",\n          \"ignoreFailures\": true,\n        },\n      ],\n    },\n  ],\n}"
  },
  {
    "objectID": "win11-for-engineers-manual.html#julia",
    "href": "win11-for-engineers-manual.html#julia",
    "title": "Руководство",
    "section": "3.5 Julia",
    "text": "3.5 Julia\nУстановить Julia:\nwinget install --id=Julialang.Juliaup -e\njuliaup add lts\njulia\n] add Revise, OhMyREPL, Unitful, Roots,\n      DataStructures, Plots, Chairmarks, Debugger\nНастроить %UserProfile%\\.julia\\config\\startup.jl:\natreplinit() do repl\n    @eval using OhMyREPL\n    @eval using Unitful\n    @eval using LinearAlgebra\n    @eval using Chairmarks\n    @eval using Debugger\n    @eval using DataStructures\n    @eval using Revise\nend\nУстановить расширение Julia для VSCode (пример установки).\nПосле установки создать новый test1.jl файл, набрать в нём 1+1, и нажать Ctrl+Enter, должно появиться всплывающее сообщение с ответом 2, по Esc пропадёт; в открывшемся терминале также должен появиться ответ 2 (при первом запуске, или после обновления, период ожидания до ответа может быть продолжительным)."
  },
  {
    "objectID": "win11-for-engineers-manual.html#система-контроля-версий-git",
    "href": "win11-for-engineers-manual.html#система-контроля-версий-git",
    "title": "Руководство",
    "section": "3.6 Система контроля версий Git",
    "text": "3.6 Система контроля версий Git\n&lt;TBD&gt;\n+ https://github.com/"
  },
  {
    "objectID": "win11-for-engineers-manual.html#полезные-консольные-утилитки",
    "href": "win11-for-engineers-manual.html#полезные-консольные-утилитки",
    "title": "Руководство",
    "section": "3.7 Полезные консольные утилитки",
    "text": "3.7 Полезные консольные утилитки\n\n3.7.1 TL;DR — Too Long; Didn’t Read\ntldr – https://tldr.sh/.\nНабор небольших справок по командам Windows, Linux, и т.д., по страничке буквально. В ней более 5000 справок, и, скорее всего, есть справки по всем командам, которые упоминаются в этом руководстве.\nУстановка (Note: программа называется tldr, а пакет называется tlrc):\nscoop install tlrc\ntldr --gen-config &gt; %UserProfile%\\AppData\\Roaming\\tlrc\\config.toml\nПосле отредактировать в конфиге %UserProfile%\\AppData\\Roaming\\tlrc\\config.toml в секции [cache] опцию languages = ['ru','en'], чтобы, по возможности, были справки на русском. Note: при первом запуске скачивает с инета архив со справками, и распаковывает, занимает меньше минуты.\nИспользование:\ntldr robocopy\n\n\n3.7.2 robocopy\nВстроенная утилита Windows для копирования файлов и папок с сохранением прав и времени создания. Применяется командой:\nrobocopy d:some-dir e:some-another-dir /E /DCOPY:T\n“some-dir” будет скопирована в “some-another-dir”, получив в результате “some-another-dir\\some-dir”.\n\n\n3.7.3 fd – поиск файлов\nУстановка:\nscoop install fd\n\nИспользование\nУтилита fd в качестве шаблона поиска файлов использует регулярные выражения (по умолчанию), поэтому вместо классического шаблона find -iname '*PATTERN*' следует использовать банальный удобный:\nfd PATTERN\nто есть для поиска курсовой набрать: fd курсов, или, если не нашлось, может так поможет: fd kursov.\nfd считает свой шаблон в режиме ignorecase, если только в шаблоне нет заглавных букв, иначе шаблон casesensitive. Опция -i задаёт режим ignorecase.\nДля поиска по привычным шаблонам со звёздочкой (*) применяется опция -g/--glob:\nfd --glob \"task*.py\"\nfd -g \"task*.{h,c,c++,cpp}\" Projects\nЭта же опция применяется для поиска по точному имени.\nПоиск файлов по расширению:\nfd --extension docx\nfd -e docx\nВключить в поиск скрытые (системные) папки и файлы:\nfd --hidden -g \"*.conf\" %UserProfile%\nПоиск с одновременным выполнением какой-либо команды над найденным файлом:\nfd -e doc %HOME% --exec soffice -convert-to docx {}\nfd --hidden \"\\.vhdx$\" C:\\ --exec ls -l {}\nОпция -t, --type позволяет искать отдельно папки, файлы, и т.д., по типу: f/file, d/directory, l/symlink, x/executable, e/empty, например, найти все git репозитории на диске C: :\nfd --hidden -g \"\\.git\" C:\\ -t d\nNote: fd в поиске учитывает спецификации настроек проектов, git, и прочего; то есть, если в .gitignore указаны файлы или папки, то fd пропустит их, даже если они удовлетворяют критериям поиска. Для обхода есть опция -I, --no-ignore.\n\n\n\n3.7.4 ripgrep и rga\nripgrep (rg)\nБыстрый поиск по текстовым файлам.\nrga\nrg all — поиск по документам: pdf, docx (но не doc), html, ipynb, внутри архивов. rga внутри использует rg для поиска по распакованному содержимому документов, и, все опции rg, это и опции rga.\nscoop install ripgrep\nscoop install pandoc\nscoop install poppler\nscoop install rga\nНастройка: создать переменную окружения RIPGREP_CONFIG_PATH указывающую на файл %HOME%\\.config\\ripgreprc; создать этот файл с конфигурацией:\n--smart-case\n--auto-hybrid-regex\n--glob=!*~\n--glob=!*~?\n# https://github.com/BurntSushi/ripgrep/blob/master/FAQ.md#how-do-i-configure-ripgreps-colors\n--colors=path:fg:blue\nС такой конфигурацией, если в шаблоне нет заглавных букв, то rg будет считать шаблон ignorecase, иначе шаблон casesensitive. Строчка конфигурации --auto-hybrid-regex указывает применять разные библиотеки regex в зависимости от сложности шаблона — для простых шаблонов это значительно ускоряет поиск. Применённая опция _–glob=!*~_ указывает пропускать (!) файлы оканчивающиеся на ~.\n\nИспользование\nКак и fd, rg производит поиск по шаблонам в форме регулярных выражений, поэтому не нужны какие-либо звёздочки, а надо прямо набирать:\nrg sometext\nПоиск по файлам определённого типа опцией g/--glob:\nrg --glob \"*.py\" задача\nrg -g \"*.py\" -g \"*.ipynb\" задача\nrg задача -g \"*.{c,c++,h}\"\nrga -g \"*.{docx,pdf}\" отчет\nNote: Для rga тип документов для поиска можно задать выбором адаптера (просмотрщика) с помощью опций таких как rga --rga-adapters=pandoc,zip, но, это достаточно широкие классы документов, поэтому лучше задавать по расширению, как было сделано выше. Адаптеры rga:\n\npandoc отвечает за: .epub, .odt, .docx, .fb2, .ipynb, .html, .htm;\npoppler за .pdf;\ndecompress: .als, .bz2, .gz, .tbz, .tbz2, .tgz, .xz, .zst;\ntar: tar;\nzip: .zip, .jar\n\nПоиск по целым словам опцией -w/--word-regexp:\nrg -w argparse -g \"*.py\"\nВывести только имена файлов содержащих искомое — опция -l/--files-with-matches.\nВывести контекст найденного, это опции A/B/C – After, Before, Context. Следующее выражение выводит полную историю команд, а затем rg ищет команды над init.lua и выводит не только саму команду, но и ближайшие 5. Это выражение, так же, показывает особенность регулярных выражений — в них точка обозначает любой символ, а вот для поиска самой точки её необходимо экранировать:\nhistory | rg -C5 \"init\\.lua\"\nОпять же, аналогично fd, поиск по скрытым файлам с опцией --hidden.\n\n\n\n3.7.5 parallel\nGNU parallel, это утилита, которая: запускает в параллель несколько задач; отслеживает их завершение, чтобы запустить следующую в очереди задачу; отслеживает вывод на экран, чтобы информация не выводилась вперемешку; может разбивать большие файлы для обработки в параллель по кусочкам; и многое другое. Википедиа, Tutorial.\nВ Windows может использоваться parallel из WSL:\nwsl parallel -j4 \"cmd.exe /c magick convert {} -resize 1920x1080  resized_{}\" ::: *.jpg\nls -1 *.jpg | wsl parallel -j4 \"cmd.exe /c magick convert {} -resize 1920x1080 {.}.png\"\nВ этих командах утилита обработки изображений magick (из пакета ImageMagick) запускается в параллель. Здесь:\n\n-j4 определяет число параллельно запускаемых задач;\n::: отделяет запускаемую команду от аргументов для parallel;\n{} — строка замены, на место которой будет подставлен аргумент для распараллеливаемой команды;\n{.} — строка замены, в которой будет удалено расширение файла;\nиспользуется cmd.exe /c чтобы не пришлось прописывать полные пути до запускаемой команды, так как wsl не знает путей PATH Windows;\n\nNote: Установка parallel в WSL: wsl sudo apt install parallel.\n\n\n3.7.6 time\ntime — утилита из мира Linux, позволяющая измерить время выполнения программы.\nУстановка: scoop install time.\nИспользование вполне обычное, только необходимо использовать команду timecmd, т.к. имя time занято — это встроенная команда Windows с другим функционалом:\ntimecmd make all\nNote: При использовании современной темы оформления оболочки (shell) подобная утилита не требуется, так как сам терминал пишет затраченное время.\n\n\n3.7.7 top\nУтилиты схожие с top: btop, wttop\nscoop install btop\nscoop install wttop\n\n\n3.7.8 ccat\nУтилита cat, которая выводит содержимое файлов с подсветкой, как в приличных редакторах:\nscoop install ccat\n\n\n3.7.9 mc — Midnight Commander\nКлассика на Windows тоже работает, и умеет Shell link….\nscoop install extras/mc\nNote: Сменить диск: Alt+D\nNote: Терминал в mc по Ctrl+O нормально не работает.\n\n\n3.7.10 Остальные Linux утилиты\nБольшое количество стандартных Linux консольных утилит входит в пакет BusyBox.\nNote: BusyBox — это набор Linux команд, скомпилированных для Windows, которые поддерживают wildcard globbing как в Linux.\nУстановка:\nscoop install busybox\nОбщие опции:\n\n-h — [h]uman, выводить размеры в Kb (KiB), Mb (MiB), и т.д., а не в байтах;\n\n\nсовпадающие системные имена\nС помощью алиасов можно настроить нормальные имена для Linux утилит, имена которых совпадают с именами системных Windows утилит.\nНапример, настроить имя для утилит sort, time. Для Clink добавить строчки в “%LOCALAPPDATA%\\clink\\clink_start.cmd”:\ndoskey sort=%UserProfile%\\scoop\\shims\\sort.exe $*\ndoskey time=%UserProfile%\\scoop\\shims\\time.exe $*\nNote: Для PowerShell смотри соответствующий пункт главы Настройки Windows Terminal.\n\n\n3.7.10.1 BusyBox команды\n[ [[ ar arch ascii ash awk base32 base64 basename bash bc bunzip2 busybox bzcat bzip2 cal cat cdrop chattr chmod cksum clear cmp comm cp cpio crc32 cut date dc dd df diff dirname dos2unix dpkg dpkg-deb drop du echo ed egrep env expand expr factor false fgrep find fold free fsync ftpget ftpput getopt grep groups gunzip gzip hd head hexdump httpd iconv id inotifyd install ipcalc jn kill killall lash less link ln logname ls lsattr lzcat lzma lzop lzopcat make man md5sum mkdir mktemp mv nc nl nproc od paste patch pdpmake pdrop pgrep pidof pipe_progress pkill printenv printf ps pwd readlink realpath reset rev rm rmdir rpm rpm2cpio sed seq sh sha1sum sha256sum sha3sum sha512sum shred shuf sleep sort split ssl_client stat strings su sum sync tac tail tar tee test time timeout touch tr true truncate ts tsort ttysize uname uncompress unexpand uniq unix2dos unlink unlzma unlzop unxz unzip uptime usleep uudecode uuencode vi(tutorial) watch wc wget which whoami whois xargs xxd xz xzcat yes zcat\nNote: Подробное описание по командам на русском языке можно найти на сайте https://www.opennet.ru/man_1.shtml.\n\n\nНекоторые утилиты:\n\n\n3.7.10.2 du и df\ndu — Disk Usage — показывает объём, занимаемый файлами и/или папками; опция -s – суммарный размер, а не каждого элемента.\ndf — Disk Full — показывает объём дисков, полный, свободный, занятый.\nПосмотреть занимаемое место файлами и/или папками:\ndu -sh .\ndu -sh some-folder\ndu -sh * | sort -h\nПосмотреть общее и занятое место на дисках:\ndf -h\n\n\n3.7.10.3 head и tail\nhead -n3 *.txt — вывести первые три строки;\nhead -n-3 *.txt — вывести все строки кроме последних трёх;\ntail -n3 *.txt — вывести три последних строки;\ntail -n+3 *.txt — вывести все строки кроме первых трёх;\n\ntail -n+1 *.txt — вывести содержимое всех файлов, предварив названием файла.\n\n\n3.7.10.4 wget\nСкачивает с инета страницу или файл:\nwget URL\nСкачать сайт: -r – recursive, -np – no-parent, -p – также скачать всё что требуется для отображения страницы, -c – продолжить (continue) закачку с места разрыва, если он случится, --restrict-file-names=nocontrol – после загрузки не экранировать русские буквы в именах файлов. URL не обязательно должен быть корневой страницей.\nwget -r -np -p -c --restrict-file-names=nocontrol URL\n\n\n3.7.10.5 xargs\nПрименить команду к каждой строке в списке:\nfd --hidden \"\\.vhdx$\" %HOME% | xargs -I@ cp -v @ E:\\backup\\wsl\\\n\n\n3.7.10.6 watch\nОпция -d подсвечивает изменения.\nwatch -d df -h — отслеживать заполненность дисков; по умолчанию, периодичность 2 секунды.\n&lt;TBD&gt;\nwatch -d 'cat /proc/vmstat | grep numa' — отслеживать результат периодического выполнения команды."
  },
  {
    "objectID": "win11-for-engineers-manual.html#офисные-пакеты",
    "href": "win11-for-engineers-manual.html#офисные-пакеты",
    "title": "Руководство",
    "section": "4.1 Офисные пакеты",
    "text": "4.1 Офисные пакеты\nСуществует, как минимум, три офисных пакета с открытым исходным кодом, которые позиционируются как вполне разумная замена MSOffice для вариантов персонального использования. У MSOffice есть заметные преимущества в совместной, распределённой работе над документами в организациях, с поддержкой сервиса SharePoint, и т.п., но и здесь появились альтернативы. У всех пакетов есть ленточный/ribbon интерфейс схожий с MSOffice. Все поддерживают стили MSOffice, отображение и набор формул.\nNote: у всех офисных пакетов есть некоторое несовпадение в отображении открытых документов с MSOffice, которое связано с тем, что пользователи оформляют документы и презентации не на основе стилей, а вручную подгоняя вид пробелами и отступами. Если же использовать правильный, рекомендуемый Microsoft, поход к оформлению документов, то различия в отображении документов будут минимальны, а скорее всего, вообще неразличимы.\nОбщие рекомендации при использовании офисных пакетов:\n\nИспользовать исключительно стили для оформления. Пора забыть про пробелы и табы для выравнивания!\nШаблоны — это основа любого документа!\nПри редактировании чужого документа обязательно включать режим правок/рецензирования!\nЯкори — это плохо!\n.doc давно пора закопать!\nПора обновить свой офисный пакет, ему уже почти 20 лет, там всё стало намного удобнее.\n\n\n4.1.1 LibreOffice\nLibreOffice\nКонсервативный офисный пакет для персонального использования. Превосходно справляется с конвертацией документов из/в форматов MSOffice; единственное бесплатное приложение, которое умеет правильно читать документы старого формата .doc.\nscoop bucket add extras\nscoop install extras/libreoffice\nscoop shim add soffice %UserProfile%\\scoop\\apps\\libreoffice\\current\\LibreOffice\\program\\soffice.exe\nscoop shim add loffice %UserProfile%\\scoop\\apps\\libreoffice\\current\\LibreOffice\\program\\soffice.exe\nNote: В последних версиях есть ленточный (ribbon) стиль оформления интерфейса, похожий на MSOffice; включение через View &gt; User Interface: UI Variants &gt; Tabbed; выключение через это же меню, которое будет расположено в правом верхнем углу в виде трёх полосочек.\nNote: для мониторов с высоким разрешением (High DPI) потребуется переключиться на SVG набор иконок в меню (&lt;Alt-F12&gt;) Tools &gt; Options &gt; LibreOffice &gt; View. Ленточный (ribbon) интерфейс не совместим с мониторами с высоким разрешением.\nПрименение для конвертации .doc в .docx (с обновлением в поддерживаемый формат MSEquation), в текущей папке:\nsoffice -headless -convert-to docx *.doc\nТо же, рекурсивно по папкам:\nfd -e doc --exec soffice -convert-to docx {}\nВывести содержимое .doc/.docx на экран:\nsoffice -cat somedoc.doc\n\n\n4.1.2 OnlyOffice\nOnlyOffice — офисный пакет от Российских разработчиков, участвует в программе импортозамещения. Opensource, кроссплатформенный, имеет версию для Android и iOS. В качестве формата хранения документов использует форматы файлов MSOffice (какого-то своего особенного формата не имеет). Умеет редактировать pdf. Установка:\nwinget install --id=ONLYOFFICE.DesktopEditors -e\nПомимо десктоп версии, у OnlyOffice есть открытая версия офиса для облачного, совместного использования на платформе частного облака NextCloud. Но, данные возможности не имеют смысла при персональном, не коллективном использовании, буквально избыточны; поэтому, здесь только ссылка на guide по установке для желающих попробовать.\nТакже у OnlyOffice есть OnlyOffice-Server, предназначенный для организации облачного сервиса, аналога Office365 и SharePoint, с поддержкой распределённой, совместной работы.\n\nОтступление про редактирование pdf.\nВнутренний формат pdf не содержит информации о последовательности символов и слов, а содержит информацию, в каком месте страницы нарисовать тот или символ или слово (и, как следствие, пробелы тоже не хранит). Даже в отдельном параграфе слова не обязательно будут в естественном порядке. С математическими формулами или таблицами ситуация совсем катастрофическая. Поэтому, все программы для редактирования pdf “додумывают” информацию о том, в какой последовательности идут символы и слова. Поэтому, самый лучший способ редактирования pdf, это сконвертировать pdf в Markdown методом OCR или ИИ, и полученный Markdown сконвертировать в docx.\n\n\n\n4.1.3 Collabora\nCollabora Online\nЕщё один бесплатный открытый офисный пакет с возможностью совместного, распределённого редактирования документов; эти возможности хорошо интегрированы в платформу частного облака NextCloud. Этот офисный пакет работает исключительно “онлайн”, т.е. его нельзя “установить” на компьютер. Опять же, для персонального использования это избыточно; и здесь упоминается только для полноты обзора.\n\n\n4.1.4 MSOffice tips\n\n4.1.4.1 Нумерация рисунков в Word\nСначала необходимо вставить рисунок в документ, выбрав соответствующий пункт меню «Вставка» и выбрав рисунок из файловой системы или из другого источника. Затем, после вставки рисунка, необходимо выбрать его и перейти во вкладку «Ссылки» в верхнем меню Word.\nВо вкладке «Ссылки» находится группа команд «Подписи», которая содержит кнопку «Подписи для рисунков». При нажатии на эту кнопку открывается диалоговое окно, в котором можно выбрать опции для автоматической нумерации рисунков. В окне можно указать формат нумерации, префикс и суффикс для нумерации, а также выбрать стиль подписей для рисунков.\nlink.\n\n\n4.1.4.2 Сделать прозрачным фон картинок в PowerPoint\nРаньше (2003) этот пункт меню был в быстром доступе на панели работы с рисунками. Сейчас он спрятан в &lt;TBD&gt;"
  },
  {
    "objectID": "win11-for-engineers-manual.html#текстовые-документы",
    "href": "win11-for-engineers-manual.html#текстовые-документы",
    "title": "Руководство",
    "section": "4.2 Текстовые документы",
    "text": "4.2 Текстовые документы\nНа данный момент Markdown это основной формат разметки для текстовых документов. Помимо этого существует ещё пара десятков форматов с аналогичным функционалом, но после того, как github взял Markdown в качестве своего основного языка разметки, все остальные постепенно вышли из использования.\nЕщё существует LaTeX, но это излишне переусложнённо и не читабельно для целей написания простых статей, веб-страниц, или документации к программам. Здесь LaTeX упоминается только из-за его языка разметки математических выражений, который повсеместно распространился, в отрыве от самого LaTeX’а.\nОсновополагающей идеей Markdown является сохранение, и, даже, повышение читабельности текста, чтобы можно было читать и писать документы в любом простом редакторе. В Markdown есть аннотации для выделения и оформления таких элементов, как: заголовки, параграфы, списки, таблицы, акценты текста, встраивание рисунков, аннотация кода, встраивание математических формул, сноски, ссылки на главы и ссылки на внешние ресурсы. Существуют расширения Markdown для: библиографий и цитирования, рисования диаграмм, выполнения кода скриптов. С одной стороны, это простой текст который можно просматривать хоть выводом cat на экран, а с другой стороны, для Markdown есть множество приложений для полноценного графического отображения содержимого в привычном по офису виде.\nВ силу того, что Markdown это всё же просто текст, то в нём не содержится каких-либо стилей или графического оформления. Таким занимаются программы для отображения, рендеринга и конвертации. Именно в этих программах будет выбираться размер шрифта, межстрочный интервал и т.п. при конвертации в pdf или docx. Обычно, это применение либо встроенных шаблонов стиля, либо использование шаблонов стиля предоставляемых пользователем.\n\n4.2.1 Markdown\nРедактирование Markdown и синхронное отображение поддерживается в VSCode “из коробки”, в том числе, есть отображение картинок, таблиц, формул, сносок, и проч. https://code.visualstudio.com/docs/languages/markdown. Встроенный в VSCode Markdown Preview можно донастраивать расширениями. Открыть превью в VSCode: Ctrl+Shift+V.\nДля просмотра без редактирования можно использовать любой браузер с одним из плагинов для просмотра Markdown, например Markdown Viewer. Это расширение предоставляет возможность использовать все возможности Markdown: формулы, рисунки, таблицы, сноски, и т.д.\nВ Google docs Markdown — это один из форматов для экспорта, причём, при экспорте, рисунки становятся встроенными (embedded) прямо в файл .md.\nДля конвертации в и из формата Markdown во всевозможные другие применяется конвертер pandoc, о нём будет дальше.\n\n\n4.2.2 Quarto\nQuarto — интерактивная система вёрстки на основе Markdown, с одновременным отображением отрендеренного содержимого:\n\nумеет показывать формулы, картинки, код, таблицы;\nможет выполнять код на Julia, Python, R, Observable JS, и показывать результат в тексте;\nимеет стили, для оформления статей, презентаций, сайтов, и др. Стили можно использовать пользовательские, их можно предоставить либо в виде шаблона стилей dotx или potx, либо в виде готового файла docx или pptx, с которого будет скопирован стиль оформления;\nформат файлов Quarto (.qmd) — это Markdown с некоторыми расширениями, т.е. простой текстовый файл, который можно редактировать в любом редакторе;\nподдерживается в VSCode расширении;\n.qmd файлы конвертируются в pdf, docx, pptx, html с учётом заданных стилей, или стилем по умолчанию;\nумеет загружать .ipynb;\nJupyterLab умеет показывать Quarto с полным форматированием;\nпод капотом использует pandoc.\n\nУстановка:\nwinget install --id=Posit.Quarto -e\npython3 -m pip install nbclient\nquarto install tinytex\nМожно использовать в VSCode с соответствующим плагином. А можно просто написать .qmd файл в любом редакторе, и сконвертировать в выбранный формат: quarto render win11-engineers-manual.qmd (как данное руководство).\n\n\n4.2.3 Универсальный конвертер Pandoc\npandoc\nИнструмент командной строки (CLI) для конвертации документов в различных форматах в документы других различных форматов: pdf, docx, pptx, html, Markdown могут быть сконвертированы друг в друга почти без ограничений, в том числе и с сохранением математических формул. Поддерживает перенос библиографий, цитирования, стилей оформления, таблиц в другие форматы файлов. Установка:\nscoop install pandoc\nПримеры использования:\npandoc --from=html --to=markdown --wrap=none some-saved-site-page.html\npandoc --to=markdown --wrap=none mine-article-with-math-formulas.docx\npandoc -s math.tex -o example30.docx\nОпцию --from использовать необязательно, pandoc в большинстве случаев автоматически поймёт исходный формат по расширению или содержимому. Выходной формат надо обозначать в случаях неоднозначного соответствия расширения файла формату, как в случае с .md, которому соответствует несколько диалектов Markdown. См. руководство https://pandoc.org/MANUAL.html."
  },
  {
    "objectID": "win11-for-engineers-manual.html#программы-для-ведения-заметок",
    "href": "win11-for-engineers-manual.html#программы-для-ведения-заметок",
    "title": "Руководство",
    "section": "4.3 Программы для ведения заметок",
    "text": "4.3 Программы для ведения заметок\nПриложения для ведения заметок разделяются по способу хранения базы заметок: один локальный файл с базой, множество локальных .md файлов и картинок, облачное хранение. Выбор программы во многом определяется выбором способа хранения.\nСреди множества существующих программ для ведения заметок следует рассматривать только opensource программы, которые поддерживают формулы в LaTeX нотации https://alternativeto.net/category/productivity/note-taking/. Программ много, можно выбрать на любой вкус.\n\n4.3.1 Logseq\nПример приложения с хранением каждой записи в отдельном файле — Logseq. Считается свободной альтернативой Obsidian. Гайд по LogSeq.\nwinget install --id=Logseq.Logseq  -e\n\n\n4.3.2 dendron\nЕщё одно приложение с хранением каждой записи в отдельном файле — плагин dendron для VSCode. Это приложение в качестве основной особенности указывает удобный поиск и навигацию по базе в десятки тысяч заметок. Инструкция.\n\n\n4.3.3 TiddlyWiki\nВ качестве программы для ведения заметок с одним локальным файлом можно рассмотреть TiddlyWiki – https://tiddlywiki.com. Это браузерное JavaScript приложение в виде одного .html файла, т.е., чтобы посмотреть или отредактировать заметки, не потребуется установка каких-либо программ, а всего лишь открыть этот файл в браузере. Поддерживает язык разметки Markdown и формулы LaTeX. Минус этого приложения автоматически вытекает из его плюса — так как база заметок это один файл, то при добавлении картинок этот файл быстро разрастается до десятков, если не сотен мегабайт, и становится тормозным. А если вставлять картинки в виде ссылок на файлы, то теряется концепция хранилища в виде одного файла. Можно использовать векторные картинки, например в формате SVG, но их сложно делать, а tikz не поддерживается. Так же из минусов — это отсутствие Autosave “из коробки”.\nДля удобства использования потребуется настроить Autosave для TiddlyWiki: в Firefox установить плагин Timimi, также установить приложение timimi-2-1-1-Windows-Firefox.exe. Autosave работает только в Firefox, в Chromium почему-то не работает.\nСкачать https://tiddlywiki.com/#GettingStarted — пустой файл заметок. Открыть в Firefox. Установить плагины:\nCodeMirror\nCodeMirror Close Brackets\nCodeMirror Mode Markdown\nCodeMirror Search and Replace\nHighlight\nKaTeX\nMarkdown\nNote: Есть поддержка режима редактирования Vim в плагине CodeMirror Keymap Vim, но для пользователей Vim лучше установить расширение https://github.com/glacambre/firenvim, которое запускает настоящий Vim во всех полях редактирования."
  },
  {
    "objectID": "win11-for-engineers-manual.html#обработка-картинок-и-создание-видео",
    "href": "win11-for-engineers-manual.html#обработка-картинок-и-создание-видео",
    "title": "Руководство",
    "section": "4.4 Обработка картинок и создание видео",
    "text": "4.4 Обработка картинок и создание видео\n\n4.4.1 ImageMagick\nImageMagick – пакетная обработка файлов изображений из командной строки.\nscoop install imagemagick\nNote: GraphicsMagick – тоже самое, что и ImageMagick, но работает быстрее – лучше распараллеливается, но, может глючить выполнять обработку с ошибками. Запускается в точности как ImageMagick, только с префиксом gm, а не magick, например: gm mogrify .... Использовать стоит только в случае обработки очень большого количества файлов (сотни и больше), и убедившись, что GraphicsMagick выполняет всё идентично с ImageMagick Использовать не стоит, так как для параллелизации есть другие инструменты, например, GNU parallel.\nImageMagick применяется как magick operation ..., где operation:\n\nconvert преобразует изображение и записывает результат в другой указанный файл.\nmogrify модифицирует исходный файл.\nmontage собирает (монтирует) несколько изображений в один файл. По умолчанию уменьшает размер до 120x120. montage -mode concatenate -tile 1x -geometry 1920x1080 *.jpg out.jpg – соединить все изображения в одну вертикальную ленту, отмасштабировав в один размер 1920x1080 с сохранением пропорций.\n\nNote: Порядок опций имеет значение — несколько действий будут выполняться друг за другом, а опции, вроде -gravity, или указания цвета, имеют влияние только на следующие за ними команды.\nNote: префикс magick можно опускать и применять непосредственно соответствующие утилиты; кроме convert, имя которой совпадает с одноимённой утилитой Windows.\n\nУказание размеров изображения для утилит ImageMagick (далее показаны на примерах).\n\n\n\n\n\n\nРазмер\nОбщее описание3\n\n\n\n\nscale%\nВысота и ширина масштабируются на указанный процент.\n\n\nscale-xxscale-y%\nВысота и ширина масштабируются отдельно на указанные проценты.\n\n\nwidthx\nШирина задана, высота автоматически подбирается для сохранения соотношения сторон.\n\n\nxheight\nВысота задана, ширина автоматически подбирается для сохранения соотношения сторон.\n\n\nwidthxheight\nЗаданы максимальные значения высоты и ширины, соотношение сторон сохраняется.\n\n\nwidthxheight^\nЗаданы минимальные значения ширины и высоты, соотношение сторон сохраняется.\n\n\nwidthxheight!\nШирина и высота заданы явно, исходное соотношение сторон игнорируется.\n\n\nwidthxheight&gt;\nУменьшает изображение, если его размер(ы) больше указанных ширины и/или высоты.\n\n\nwidthxheight&lt;\nУвеличивает изображение, если его размер(ы) меньше указанных ширины и/или высоты.\n\n\narea@\nИзменяет размер изображения до указанной площади в пикселях. Соотношение сторон сохраняется.\n\n\nx:y\nЗдесь x и y обозначают соотношение сторон (например, 3:2 = 1.5).\n\n\nx:y^\nУдаляет строки или столбцы для достижения заданного соотношения сторон.\n\n\nx:y#\nДобавляет строки или столбцы для достижения заданного соотношения сторон.\n\n\n{size}{offset}\nУказание смещения (по умолчанию +0+0). Ниже {size} относится к любой из вышеуказанных форм.\n\n\n{size}{+-}x{+-}y\nГоризонтальное и вертикальное смещения x и y, указанные в пикселях.\nЗнаки обязательны для обоих.\nСмещения зависят от опции -gravity4.\nСмещения не зависят от % или других операторов размера.\nОбратите внимание, что положительные смещения X и Y\nнаправлены внутрь к центру изображения для всех опций -gravity,\nкроме ‘Center’.\nДля ‘East’ +X – влево. Для ‘South’ +Y – вверх.\nДля ‘SouthEast’ +X – влево и +Y – вверх.\nДля ‘Center’ используется обычное направление X и Y\n(+X – вправо, +Y – вниз).\n\n\n\n\nОтступление об особенностях экранирования аргументов команд в командной строке в Windows и Linux. Помимо обычных символов перенаправления потоков (&gt;, &lt;, |) в Windows особое значение имеют символы: ^, % (^ используется для экранирования других символов, а % используется для разыменования переменных). Они могут быть использованы в качестве аргументов следующим способом: там где нужен % надо писать %%, а ^ должен быть экранирован кавычками, иначе будет проигнорирован. В Linux особые символы !, (, ), \\; для использования в качестве аргументов они должны быть экранированы либо кавычками, либо с помощью \\; и сам символ \\ тоже должен быть экранирован как \\\\. Также, в Windows и Linux одинарные и двойные кавычки имеют противоположную роль: в Linux одинарные кавычки более “сильные”, чем двойные; в Windows наоборот. Поэтому при использовании в Windows команд из мира Linux надо заменять ' на \", и наоборот.\n\n\n4.4.1.1 Примеры\nКонвертация всех jpg в меньшее качество – 75 (по умолчанию 92), задать имена выходных файлов как *-converted.jpg: CHEKME:\nmagick convert -quality 75 -set filename: \"%t\" \"%[filename:fname]-converted.jpg\" *.jpg\nmagick convert -quality 75 -set filename:fname \"%t\" \"%[filename:fname]-converted.jpg\" *.jpg\nОтмасштабировать картинки с сохранением aspect ratio:\nmogrify -resize 50%% *.png\nmogrify -resize 1920x1080 *.png\nБез сохранения соотношения сторон (здесь кавычки для экранирования символа !, который в некоторых терминалах имеет специальное значение):\nmogrify -resize \"1920x1080!\" *.png\nКонвертация всех изображений из папки images в jpeg формат, с масштабированием всех картинок в размер 1920 пикселя по ширине, с сохранением в папку images-transformed:\nmagick convert images -resize 1920x JPEG:images-transformed\nОбрезать рамки одного цвета по краям картинки, уменьшить, и добавить рамку белого цвета шириной 8 пикселей (опция +repage для обновления внутренней системы координат png при обрезке):\nmogrify -trim -resize 50%% -bordercolor white -border 8x8 +repage *.png\nОбрезать под заданный размер равномерно к центру, который смещён от геометрического центра на заданную величину (это кадрирование под нужный размер):\nmogrify -gravity Center -crop 1920x1080+40+100 +repage *.png\nОтмасштабировать в размер 1920x1080 с сохранением пропорций, недостающие поля нарастить белым цветом от центра (для прозрачности использовать none), указать тип png палитры цветов Truecolor без прозрачности (для палитры с прозрачностью задать 6):\nmogrify -resize 1920x1080 -background white -gravity Center -extent 1920x1080  +repage -define 'png:color-type=2' *.png\nСкомпоновать картинки в pdf:\nmagick *.jpg output.pdf\n\n\n4.4.1.2 Анимированный gif\nСобрать все картинки в текущей директории в анимированный gif. Опция -delay задаёт частоту кадров в форматах: N по 10 миллисекунд, или, KxL: L кадров на K секунд. По умолчанию -delay 1 — 100 кадров в секунду, но эта величина зависит от версии ImageMagick, поэтому лучше указывать её явно.\nmagick -delay 5 *.jpg movie.gif\nmagick -delay 1x20 *.png movie.gif\n\n\n\n4.4.2 ffmpeg\nffmpeg — программа командной строки для создания, записи, конвертации, и проигрывания видео и аудио файлов.\nУстановка:\nscoop install ffmpeg\nscoop install handbrake-cli\n\n4.4.2.1 Создание видео из кадров\nСоздать видео из набора кадров , “velmagfield-%04d.png” — шаблон входных файлов:\nffmpeg -framerate 20 -i \"velmagfield-%04d.png\" -r 20 -hide_banner -c:a copy -c:v libx264 -crf 18 ^\n       -profile:v main -tune animation -preset veryslow -vf format=yuv420p,scale=-1:1080 ^\n       velmagfield.mp4\nПрименяемые опции:\n\n-framerate 20 — задать частоту “кадров” входного потока png изображений (соответствует шагу по времени 0.05 секунды);\n-r 20 — задать частоту кадров выходного видео;\n-vf scale=-1:1080 — отмасштабировать видео до 1080p; результирующее разрешение должно делиться на два;\n-c:a copy -c:v libx264 — задают аудио и видеокодеки, в данном случае аудиокодек будет отсутствовать (он скопирован из входных изображений, где его нет), видеокодек — H.264;\n-crf 18 — задаёт качество картинки видео (в ущерб размеру); по умолчанию 23, 17 — видео неотличимо от исходных изображений;\n-preset veryslow — кодировать видео с особой тщательностью, в ущерб времени; другие варианты: medium, fast, slow;\n-vf format=yuv420p или -pix_fmt yuv420p — кодировать видео в цветовое пространство “4:2:0”, а не в современный вариант “4:4:4”, тогда полученное видео должно проигрываться в PowerPoint и других устаревших плеерах;\nформат выходного файла определяется его расширением; при этом, размер файла практически не зависит от расширения.\n\nЧтобы видео загружалось в Telegram как видео, а не GIF, необходимо, чтобы в нём был аудиопоток5; закодировать видео с добавлением беззвучного аудиопотока6 и всеми настройками совместимости с TG7:\nffmpeg -framerate 20 -i \"velmagfield-%04d.png\" -f lavfi -i aevalsrc=0 -hide_banner -r 20 ^\n       -max_muxing_queue_size 9999 -c:v libx264 -crf 18 -maxrate 4.5M -preset medium ^\n       -flags +global_header -pix_fmt yuv420p -profile:v baseline -movflags +faststart ^\n       -c:a aac -ac 2 -map 0:v -map 1:a -shortest velmagfield.mp4\nNote: У ffmpeg очень много опций: ffmpeg --help full, поэтому задавать специфические характеристики видео достаточно сложно. Для упрощения кодирования видео есть несколько графических оболочек для ffmpeg: handbrake, ffmpeg_batch, clever-FFmpeg-GUI. Они могут ровно то, что может ffmpeg, а именно: переконвертация видео в другой кодек, другое разрешение, кадрирование, обрезка по времени, но в графическом интерфейсе. Эти приложения могут быть установлены с помощью Scoop или Winget.\nИтоговый скрипт для создания видео из набора png картинок, разрешение видео из размера картинок, либо задаётся аргументом скрипта:\n&lt;TBD&gt;\n\n\nОтступление: Создание видео в древнем avi формате\nЭто устаревший способ кодирования видео, и он вам не потребуется; нужен только на старых серверах.\nПри таком варианте кодирования размер изображений должен быть кратным 16, этого можно добиться, либо округлив размер до 16 и перекодировать в него, либо сразу перекодировать в разрешение 1920x1072.\nВычислить размер изображения кратный 16 пикселям в большую сторону:\nmagick convert 0000.png  -format '%[fx:16*int((w+15)/16)]x%[fx:16*int((h+15)/16)]' info:\nОтмасштабировать в размер 1920x1072 с сохранением пропорций, недостающие поля нарастить белым цветом от центра (для прозрачности использовать none), указать тип png палитры цветов Truecolor без прозрачности (для палитры с прозрачностью задать 6):\nmogrify -resize 1920x1072 -background white -gravity Center -extent 1920x1072  +repage -define 'png:color-type=2' *.png\nИ создать древний avi:\npng2yuv -f 20 -Ip -j '%04d.png' | yuv2lav -b 2048 -o export.avi\nКоторый можно перекодировать в видео с кодеком поновее, в mpeg4 или H.264:\nHandBrakeCLI --preset \"Production Standard\" --encoder mpeg4 -i export.avi -o export.mp4\nHandBrakeCLI --preset \"Production Standard\" --encoder x264 -i export.avi -o export.mp4"
  },
  {
    "objectID": "win11-for-engineers-manual.html#openfoam",
    "href": "win11-for-engineers-manual.html#openfoam",
    "title": "Руководство",
    "section": "5.1 OpenFOAM",
    "text": "5.1 OpenFOAM\nOpenFOAM\nОнлайн книжка по OpenFOAM – Notes on Computational Fluid Dynamics: General Principles (2022) C. Greenshields, H. Weller.\nOpenFOAM будет запускаться из docker-контейнера из под WSL. В такой комбинации: OpenFOAM сможет работать в параллельном режиме, будет запускаться ParaView без X-сервера в нативном WSL2 графическом режиме.\nДальше предполагается, что DockerDesktop уже запущен.\nУстанавливается с помощью docker из каталога openfoam, например8:\ndocker pull openfoam/openfoam11-paraview510:latest\nУстановка: в WSL скачивается запускающий OpenFOAM скрипт из официального каталога http://dl.openfoam.org/docker/ и настраивается; для этого выполнить следующие команды в WSL терминале (открывается командой wsl или в профиле WSL в WT/Conemu/Cmder):\nmkdir -p $HOME/software\ncd $HOME/software\nwget http://dl.openfoam.org/docker/openfoam11-linux\nsudo mkdir -p /usr/local/bin\nsudo cp openfoam11-linux /usr/local/bin\nsudo chmod a+x /usr/local/bin/openfoam11-linux\nexit\nЗапуск OpenFOAM: выполнить из любого терминала:\ncd some-project-dir\nwsl openfoam11-linux -x\nNote: если изначально OpenFOAM не был закачен с помощью docker pull …, то OpenFOAM будет загружен при первом запуске.\nNote: скрипт запуска openfoam11-linux имеет небольшой баг: после его запуска и выхода, запуск в этом же терминале wsl (без параметров) будет произведён в последней mount-point OpenFOAM контейнера; это абсолютно ни на что не влияет, просто к сведению."
  },
  {
    "objectID": "win11-for-engineers-manual.html#paraview",
    "href": "win11-for-engineers-manual.html#paraview",
    "title": "Руководство",
    "section": "5.2 ParaView",
    "text": "5.2 ParaView\nНативный ParaView, который умеет применять аппаратное ускорение видеоадаптера (OpenGL), должен быть побыстрее, чем встроенный в OpenFOAM. Установить (долго скачивает!):\nwinget install --id=Kitware.ParaView -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#freecad",
    "href": "win11-for-engineers-manual.html#freecad",
    "title": "Руководство",
    "section": "5.3 FreeCAD",
    "text": "5.3 FreeCAD\nFreeCAD — opensource CAD программа. Использование разделяется на режимы, в зависимости от выбранного Workbench: есть режимы создания 2D чертежа (Draft&Sketcher), два режима создания 3D деталей (Part&PartDesign), сборки геометрии (Assembly), создания сетки с помощью GMSH (Mesh), создание и решения задач МКЭ (FEM). Все эти возможности показаны в соответствующих туториалах.\nУстановка:\nwinget install --id=FreeCAD.FreeCAD -e\nНастройка:\n\nрежиму навигации мышкой продуктов Ansys соответствует режим Blender во FreeCAD\nцветовая схема FreeCAD Light самая разборчивая."
  },
  {
    "objectID": "win11-for-engineers-manual.html#blender",
    "href": "win11-for-engineers-manual.html#blender",
    "title": "Руководство",
    "section": "5.4 Blender",
    "text": "5.4 Blender\n&lt;TBD&gt;\nwinget install --id=BlenderFoundation.Blender -e"
  },
  {
    "objectID": "win11-for-engineers-manual.html#d-reverse-engineering",
    "href": "win11-for-engineers-manual.html#d-reverse-engineering",
    "title": "Руководство",
    "section": "5.5 3D reverse engineering",
    "text": "5.5 3D reverse engineering\n&lt;TBD&gt;\nhttps://alternativeto.net/software/geomagic-design-x/\nCloudCompare, about.\nMeshLab — https://www.meshlab.net/, about. The open source system for processing and editing 3D triangular meshes.\nIt provides a set of tools for editing, cleaning, healing, inspecting, rendering, texturing and converting meshes. It offers features for processing raw data produced by 3D digitization tools/devices and for preparing models for 3D printing.\nSee also https://github.com/topics/3d-reconstruction"
  },
  {
    "objectID": "win11-for-engineers-manual.html#калькулятор",
    "href": "win11-for-engineers-manual.html#калькулятор",
    "title": "Руководство",
    "section": "6.1 Калькулятор!",
    "text": "6.1 Калькулятор!\nQalculate!\nкалькулятор с широчайшими возможностями: единицы измерения, интервальная арифметика, полиномы, решение уравнений, простое дифференцирование и интегрирование, матрицы и вектора! Примеры вычислений.\nУстановка:\nwinget install --id=Qalculate.Qalculate -e`."
  },
  {
    "objectID": "win11-for-engineers-manual.html#matlab-аналоги",
    "href": "win11-for-engineers-manual.html#matlab-аналоги",
    "title": "Руководство",
    "section": "6.2 Matlab аналоги",
    "text": "6.2 Matlab аналоги\n\n6.2.1 Scilab\nScilab\nОткрытый программный комплекс, полноценная замена Matlab. Есть встроенный аналог Simulink — Xcos. Установка:\nwinget install --id=Scilab.Scilab -e\n\n\n6.2.2 Octave\nOctave — простая среда для разработки и отладки Matlab программ. Simulink не поддерживается.\nscoop install octave"
  },
  {
    "objectID": "win11-for-engineers-manual.html#sagemath",
    "href": "win11-for-engineers-manual.html#sagemath",
    "title": "Руководство",
    "section": "6.3 SageMath",
    "text": "6.3 SageMath\nSageMath — opensource программа для символьной математики, альтернатива Mathcad, Mathematica.\nУстанавливается с помощью docker из репозитория https://hub.docker.com/r/sagemath/sagemath9:\ndocker run --name sage -p8888:8888 sagemath/sagemath:latest sage-jupyter\nВ консоли появится сообщение вида\nTo access the server, open this file in a browser:\n        ...\n    Or copy and paste one of these URLs:\n        http://127.0.0.1:8888/tree?token=\nПо этой ссылке будет доступно запущенное SageMath приложение. В нём создать новую сессию: кнопка New справа сверху, из выпадающего списка выбрать SageMath. Созданный Jupyter NoteBook после работы сохранить в виде .ipynb файла, и скачать (Download) в файловом менеджере на первой странице, чтобы сохранить копию в своих папках, помимо сохранённой версии в docker контейнере.\nВ последующем, для запуска SageMath набирать столь сложную команду не потребуется: контейнер можно будет запускать либо из интерфейса DockerDesktop, либо из командной строки командой docker start sage (см. Управление Docker)."
  },
  {
    "objectID": "win11-for-engineers-manual.html#maxima",
    "href": "win11-for-engineers-manual.html#maxima",
    "title": "Руководство",
    "section": "6.4 Maxima",
    "text": "6.4 Maxima\nЕщё есть CAS (Computer Algebra Systems) программа для символьной математики Maxima/WxMaxima, использование которой достаточно не тривиально, но это, возможно, наилучшая открытая CAS.\nscoop install extras/maxima\nДополнительно можно установить чуть более новый GUI со страницы wxMaxima-developers."
  },
  {
    "objectID": "win11-for-engineers-manual.html#построение-графиков",
    "href": "win11-for-engineers-manual.html#построение-графиков",
    "title": "Руководство",
    "section": "6.5 Построение графиков",
    "text": "6.5 Построение графиков\n\n6.5.1 LabPlot\nlabplot.kde.org\nОткрытая программа для построения графиков по табличным данным, альтернатива Origin/Grapher. Понимает Markdown и LaTeX формулы; умеет загружать данные напрямую из Jupyter Notebook, включая Python, Julia, Maxima. Умеет Digitization картинок — вытаскивать данные из графиков с картинок.\nwinget install --id=KDE.LabPlot -e\n\n\n6.5.2 Veusz\nveusz.github.io\nПростая программа для построения графиков по табличным данным.\nscoop install extras/veusz\n\n\n6.5.3 Matplotlib\n&lt;TBD&gt; examples\nmatplotlib.org\nБиблиотека для Python для построения графиков, удобна для постоянных пользователей Python; установка:\npython -m pip install -U matplotlib\n\n\n6.5.4 Gnuplot\n&lt;TBD&gt; examples\nwww.gnuplot.info\nКонсольная программа для построения графиков с широкими возможностями. Примеры, обзор на русском.\nscoop install gnuplot"
  },
  {
    "objectID": "win11-for-engineers-manual.html#рекомендации-по-выбору-моделей",
    "href": "win11-for-engineers-manual.html#рекомендации-по-выбору-моделей",
    "title": "Руководство",
    "section": "7.1 Рекомендации по выбору моделей",
    "text": "7.1 Рекомендации по выбору моделей\nМодели бывают двух типов: base и instruct. Instruct это дообученная для диалога base модель, поэтому для практического применения следует выбирать instruct модель. Модели instruct более “понятливые”, но, возможно, менее “умные”, чем base. Модели base нужны для исследователей/создателей LLM для дальнейшего дообучения для каких-то частных конкретных задач.\nУ моделей есть размер — пишется как 3b, 70b и т.п. — обозначает количество коэффициентов-весов в модели в b-billions — в миллиардах. Т.е. для не квантизированной (см. далее) 3b модели с размером весов fp16 (2 байта), размер всей модели будет 3E9 * 2 байт = 6 Гбайт.\nМодели бывают исходные, где все веса имеют размер fp16 или даже fp32. И бывают квантизированные модели — модели, где веса были округлены для экономии занимаемой памяти и ускорения работы. Уровней квантизации-округления много разных, от 1 байта на коэффициент (Q_8), до 1-2 битов на коэффициент (Q_2 и т.п.). Квантизированные модели всегда менее точные и больше глючат, чем исходные, поэтому, при возможности, следует использовать неквантизированные fp16 модели. Характерная зависимость точности (perplexity) моделей от степени квантизации представлена на графике Perplexity vs. Quantization. Из графика следует, что Q_8 практически неотличима от fp16; и чем больше модель огрублена округлена, тем хуже её качество. Также из графика следует, что даже самая сжатая модель большего размера будет лучше, чем не квантизированная модель меньшего размера.\nКвантизация/quantization моделей, на момент 2024г, это, в какой-то мере, искусство, а не наука. Разные коэффициенты/веса моделей имеют разное влияние на конечный результат, и есть некоторое количество весов (логическое ядро?), которые в наибольшей степени определяют ответ, и, даже небольшое их изменение приводит к сильной деградации работы модели. Алгоритм квантизации должен, в теории, уметь находить такие ключевые веса и ограждать их от излишнего округления. Поэтому модель, квантизированная до одной и той же степени (плотности), но разными подходами и алгоритмами квантизации, может иметь принципиальное разное качество. Поэтому не стоит ожидать, что одинаковые цифры в названиях моделей дадут схожий результат.\nПри выборе степени квантизации/сжатия модели важное значение имеет область применения LLM: при написании программ или формул, т.е. там, где принципиальное значение имеет каждый символ и любые ошибки недопустимы, даже незначительная квантизация Q_8 может вносить существенные ошибки. Для практического применения всегда стоит опробовать и сравнивать модели в применении к конкретной задаче: и fp16 модель меньшего размера, и, скажем, модель Q4_K_M большего размера.\nНа практике, применение локальных LLM сильно ограничено их фактическим размером, в первую очередь это ограничение связано со скоростью шины памяти — такой большой массив данных как модель, просто физически долго прокачивать из памяти в процессор. И, как показывает опыт применения LLM, при отсутствии GPU, для современного процессора следует выбирать модель размером до 6 Гбайт (оптимально до 3 Гбайт), иначе будет работать совсем уж медленно. При наличии GPU, если размер модели помещается в VRAM, то работа модели будет прямо быстрой, что связано с, в разы, более широкой шиной памяти VRAM. Если же модель полностью не помещается в VRAM, то та часть модели, что не поместилась в VRAM, будет обрабатываться процессором и будет иметь вышеизложенные соответствующие ограничения на размер."
  },
  {
    "objectID": "win11-for-engineers-manual.html#программы-для-работы-с-локальными-llm",
    "href": "win11-for-engineers-manual.html#программы-для-работы-с-локальными-llm",
    "title": "Руководство",
    "section": "7.2 Программы для работы с локальными LLM",
    "text": "7.2 Программы для работы с локальными LLM\nСуществует небольшое число инструментов, непосредственно выполняющих LLM: llama.cpp, vLLM, transformers, плюс какие-то графические — это LLM провайдеры. Есть менеджеры библиотек LLM моделей: Ollama, huggingface_hub. И, есть большое количество программ для запуска LLM — это интерфейсы, графические “оболочки”, которые запускают тот или иной LLM провайдер, и используют менеджеры библиотек LLM.\nNote: При передаче запроса для модели используются шаблоны, которые преобразуют запрос в специально отформатированный текст, на формате которых обучались модели — у каждой модели обычно свой шаблон, и отступление от конкретного формата запроса сильно влияет на качество ответа. Существуют шаблоны шаблонов (jinja) с широкими возможностями форматирования запроса в целевой формат шаблона (применяется в LM Studio). Поэтому, один и тот же запрос в разных программах может выдавать очень разные по качеству ответы, в зависимости от применяемых шаблонов и шаблонов шаблонов.\nДалее рассмотрены несколько программ для применения LLM, из тех что попроще.\n\n7.2.1 LM Studio\nhttps://lmstudio.ai/\nУдобная программа “По одной кнопке”. Удобный встроенный поиск моделей, возможность настройки параметров модели при запуске. Умеет загружать pdf/txt прямо при запросе. Но есть два больших минуса: не opensorce – проприетарная, и лицензия запрещает любое коммерческое применение! А так да, для “поиграться”, самое то.\nУстановить:\nwinget install --id=ElementLabs.LMStudio -e\n\nИспользование:\n\nдля увеличения или уменьшения шрифта в интерфейсе использовать &lt;Ctrl+&gt; и &lt;Ctrl-&gt; (основан на Electron);\nдля контроля над LLM необходимо включить режим “Power User” в самом низу, если ещё не включен;\nвыбрать и скачать LLM модель: слева иконка лупы;\nуправление параметрами запуска скачанных моделей (здесь же удаление): слева иконка открытой папочки;\nвыбрать модель из уже скачанных для загрузки, или сменить загруженную модель на другую: сверху плашка с названием модели, при нажатии выпадет список доступных для загрузки;\nначать чат с моделью: слева в самом верху иконка сообщения;\nработа с документами: “скрепкой” подцепить файл и запрос будет работать с данными из файла.\n\n\nОтступление про отображение математических выражений.\nВ Markdown все математические выражения (формулы) записываются с использованием языка разметки LaTeX. Для выделения в тексте LaTeX выражений используются два типа нотаций. Современная нотация выделения формул использует символы \\( | \\) для встроенных (inline math) формул, и \\[ | \\] для блочных (display math) формул; и устаревшая нотация, введённая ещё Д.Кнутом, использует символы $ | $ для встроенных формул, и $$ | $$ для блочных, т.е. у устаревшей нет разделения на открывающие и закрывающие выделители формул, что нехорошо в контексте длинных или неточных текстов, где в случае потери только лишь одного символа весь последующий текст становится нечитабельным. Все языковые модели, а также большинство программ, используют надёжную современную нотацию выделения формул, но LMStudio (пока?) использует устаревшую нотацию, поэтому, в LMStudio при запросах связанных с математикой, необходимо явно указывать использовать устаревшие символы, добавляя к запросу фразу: (Use dollar and double dollar signs for math in answer).\n\nNote: Существует opensource аналог — Jan, но, конечно, пока с не столь широким функционалом. Установить можно через Winget.\n\n\n\n7.2.2 Open WebUI (with Ollama)\nhttps://openwebui.com/\nДостаточно большие возможности при несложной установке и простом интерфейсе. Умеет отображать Markdown и LaTeX формулы.\nУстановить Ollama:\nwinget install --id=Ollama.Ollama -e\nУстановка10 и запуск Open WebUI с использованием уже установленного Ollama:\ndocker run -d -p 3000:8080 --gpus all ^\n       --add-host=host.docker.internal:host-gateway ^\n       -v open-webui:/app/backend/data --name open-webui ^\n       --restart always ghcr.io/open-webui/open-webui:cuda\nOpen WebUI при этом запустится как фоновый процесс (все его свойства/характеристики можно посмотреть в интерфейсе Docker Desktop). По адресу http://localhost:3000 появится приложение в виде веб-страницы.\nВ случае ошибки соединения Open WebUI: Server Connection Error есть другие варианты установки.\nДля скачивания моделей применять команды скопированные со страницы https://ollama.com/library для выбранной LLM модели, где команду run заменить на pull, например:\nollama pull qwen2.5-coder:1.5b-instruct-fp16\n(Вроде бы есть экспериментальная возможность загрузки моделей прямо изнутри Open WebUI, но это надо где-то включать)\nПри необходимости обновления Ollama до новой версии выполнить команду:\nwinget upgrade ollama\nПри необходимости обновления Open WebUI до новой версии выполнить команду:\ndocker run --rm --volume /var/run/docker.sock:/var/run/docker.sock ^\n       containrrr/watchtower --run-once open-webui\n\nИспользование:\nПри первом запуске программа попросит задать имя, имейл и пароль, это чтобы никто другой не воспользовался данными пользователя — они хранятся в зашифрованном виде, а имейл и пароль никуда не передаются. Если забыть пароль, то данные будут потеряны.\n\nВыбрать модель из загруженных: сверху слева кнопка Arena Model.\nНовый чат/список чатов: слева сверху три горизонтальные полоски.\n\n\n\n\n7.2.3 Page Assist (with Ollama)\nPage Assist — это плагин для Chromium. Этот плагин умеет в разметку Markdown, рисовать LaTeX формулы, и подсвечивать программный код. Удобный инструмент, но на текущей версии (v1.3.4) начинает сильно тормозить, если поднакопятся чат-сессии или данные.\nУстановить Ollama (если ещё не установлен):\nwinget install --id=Ollama.Ollama -e\nУстановить плагин для Chromium Page Assist - A Web UI for Local AI Models.\nНа странице https://ollama.com/models выбрать модель (например qwen2.5-coder:1.5b или 3b), скачать (с момента установки плагина появится кнопочка-стрелочка Скачать рядом с моделью), и запустить в Page Assist.\n\n\n7.2.4 vLLM\n&lt;TBD&gt;\nhttps://github.com/vllm-project/vllm\nLLM провайдер, поддерживающий большое количество форматов моделей, мультимодальные модели. Его главное преимущество — он может запускать исходные модели в формате SafeTensors, без преобразования в упрощённые форматы типа GGUF, без каких-либо изменений.\nМожет использоваться приложениями в той же роли что и Ollama.\n\nУстановка и запуск, вариант попроще\nУстановка:\npipx install vllm huggingface_hub[cli]\nСкачивание модели с https://huggingface.co/ и запуск сервиса с OpenAI API доступного по адресу http://localhost:8088\nvllm serve Qwen/Qwen2.5-Coder-3B-Instruct --port 8088\nЗдесь 8088 — номер порта, на котором будет работать сервис.\n\n\nУстановка и запуск\ndocker run --name vllm--Qwen--Qwen2.5-Coder-3B-Instruct --runtime nvidia --gpus all ^\n    -v ~/.cache/huggingface:/root/.cache/huggingface -p 8088:8000 ^\n    --ipc=host vllm/vllm-openai:latest --model Qwen/Qwen2.5-Coder-3B-Instruct\nИ запуск в дальнейшем\ndocker start vllm--Qwen--Qwen2.5-Coder-3B-Instruct\ndocker stop vllm--Qwen--Qwen2.5-Coder-3B-Instruct\nСтарт контейнера не мгновенный, зависит от размера модели — пока модель загрузится с диска в память и/или видеопамять.\nAPI сервиса будет по адресу http://localhost:8088.\nЗапуск через docker предполагает свой контейнер на каждую LLM модель. Конечно, быстро модельки так не по-перебираешь, но vLLM на такое и не рассчитан, vLLM, это, скорее, про постоянно работающий сервис.\nNote: Удалить docker контейнер: docker container rm vllm--Qwen--Qwen2.5-Coder-3B-Instruct. Переименовать docker контейнер: docker container rename vllm--Qwen--Qwen2.5-Coder-3B-Instruct new-name."
  },
  {
    "objectID": "win11-for-engineers-manual.html#примеры-запросов",
    "href": "win11-for-engineers-manual.html#примеры-запросов",
    "title": "Руководство",
    "section": "7.3 Примеры запросов",
    "text": "7.3 Примеры запросов\nДля программирования, работы с Markdown, формулами, очень хорошо работает модель qwen2.5-coder. Для выполнения задач надо прямо в лоб на русском спрашивать:\n\nНапиши программу для параллельного умножения матрицы размером MxN на вектор с использованием MPI на языке Fortran. Последовательно объясни действия процедур.\nНапиши программу для интегрирования задачи трёх тел на примере Солнца, Юпитера и Земли методом Адамса-Башфорта на Python. Последовательно объясни действия функций.\nКак на github создать PR в чужой проект, если у меня уже есть форк этого проекта со внесёнными мной коммитами и мержами апстрима?\nКак настроить VSCode для компиляции и отладки программ на языке Fortran?\nАккуратно сконвертируй информацию с приложенного pdf в размеченный Markdown код, **сохраняй форматирование**.\n_@article-with-formulas.pdf_\nНапиши скрипт на Julia для интегрирования методом трапеций массы со второй колонки (в [kg/s]) данных в прикреплённом файле, временные метки расположены в третьей колонке (в [s]) — выведи для каждой строки входных данных, **только числа**: 1) порядковый номер, 2) суммарную, накопленную к этому моменту массу в [gramm], 3) момент времени.\n_@sample-file.dat_\nПереведи на английский язык текст начиная со следующей строки, выведи только перевод, сохраняй форматирование.\\\nЕхали медведи\\\nНа велосипеде.\\\nА за ними кот\\\nЗадом наперёд.\\\nА за ним комарики\\\nНа воздушном шарике.\nТщательно переведи на русский язык **каждую строчку** прикреплённого справочника.\n_@Reference.md_\nОформи в виде Markdown таблиц прикреплённый справочник.\n_@Справочник.md_\nСкомбинируй два прикреплённых справочника в виде Markdown таблиц из трёх колонок, где в первой колонке будет общая первая колонка, во второй описание на русском, и в третьей колонке описание на английском.\n@Reference.md_, @Справочник.md_\n\nNote: в вышеприведённых примерах используется разметка ** для выделения текста, и использовался обратный слэш (\\) в конце строк, который в Markdown обозначает перенос строки без начала нового параграфа. Также можно использовать бэктики ` и ``` для выделения участков кода. LLM модели понимают разметку Markdown, поэтому, такую разметку рекомендуется всегда использовать, для усиления акцентов, или форматирования текста с целью лучшей структуризации информации.\nNote: для перевода может применяться любая модель, которая понимает русский язык; но, есть специализированная модель aya-expance, заточенная именно для переводов на всевозможные языки.\nNote: за один запрос модель вряд ли сможет выполнить сложную задачу, поэтому задачу необходимо разбить на этапы, как в примере со справочником. Для того, чтобы модель за раз смогла выполнить сложную задачу, необходимо составлять сложные, многоэтапные запросы, с примерами, с критериями, и т.п.; см. далее.\n\n7.3.1 Expert mode\nНа данный момент (2024г) написание запросов (PROMPTs) для реальной, сложной работы представляет собой нетривиальную задачу, поэтому её стоит переложить на LLM: составляется простой запрос на русском с просьбой написать экспертный запрос на английском (LLM его лучше понимают) для выполнения требуемой работы:\n\nНапиши PROMPT для LLM на английском для рефакторинга кода с целью замены существующей структуры данных ```some current data structure``` на новую структуру данных ```some new data structure``` в нижеприведённом коде ```some code```.\n\nДолжна получиться страница текста, если же меньше, то стоит перезапустить запрос, или выбрать другую модель для генерации PROMPT’а. В полученном запросе должны быть прописаны что-то вроде Role, Requirements, Assumptions, Constraints, Target, цепочки анализа; да и вообще – запрос должен выглядеть серьёзно и экспертно :). Полученный запрос ещё придётся поредактировать, но большая часть работы уже проделана LLM.\nДанная технология генерации запросов к LLM с помощью LLM применяется во всех коммерческих ИИ системах — она не видна потому что спрятана “под капотом”. Применение цепочки моделей обусловлено тем, что создать одну универсальную модель гораздо сложнее, чем создать несколько небольших специализированных моделей заточенных на конкретную задачу. По технологии цепочки моделей, данные, полученные на выходе из одной модели, передаются на вход другой модели, формируя конвейер обработки данных.\nГотовый PROMPT также можно взять из библиотек, например https://github.com/0xeb/TheBigPromptLibrary или https://github.com/abilzerian/LLM-Prompt-Library.\n\n\n7.3.2 Expert mode, 2025 update &lt;New&gt;\nСамые современные модели обучаются методом Reinforcement Learning (RL) — Обучение с подкреплением (методом Проб и Ошибок?), в отличии от предыдущего поколения LLM, которые обучались методом Reinforcement Learning from Human Feedback (RLHF) — Обучение с подкреплением на основе отзывов, когда просто тупо запоминали весь интернет.\nЭто значит, что у современных моделей появляется Самоинтроспекция и Self-Reasoning. В следствии чего, Reasoning моделям уже не требуется какой-то особенный продвинутый запрос (PROMPT), а моделям требуется как можно больше информации про задачу, просто чтобы сразу сходу как можно полнее понять задачу, её контекст, желаемый результат. Поэтому, писать запрос следует так, как расписывали бы задачу стороннему работнику инженеру, который совсем не знает, чем ему придётся заняться, что придётся сделать, и какой результат требуется.\n\nОтступление про действительно большие модели.\nВсе коммерческие платные модели слишком велики, чтобы их было возможно запустить на персональном компьютере. Тут на первый план выходит даже не открытость весов модели, а именно её размер. Для примера, есть SOTA11 модель DeepSeek — https://chat.deepseek.com/, веса которой свободно лежат на hf.co. Но они занимают 700ГБ, т.е. для запуска модели потребуется суммарно не менее 700ГБ видеопамяти, и никакой персональный компьютер такую модель в принципе не сможет запустить. Поэтому, для сложных и/или больших задач, так или иначе, придётся оплачивать использование моделей, даже если они и открытые.\nДля локального использования остаётся только дожидаться, когда появятся узкоспециализированные модели небольшого размера, заточенные под одну конкретную задачу. И составлять из таких моделей цепочку исполнения."
  },
  {
    "objectID": "win11-for-engineers-manual.html#ии-помощники",
    "href": "win11-for-engineers-manual.html#ии-помощники",
    "title": "Руководство",
    "section": "7.4 ИИ помощники",
    "text": "7.4 ИИ помощники\n\n7.4.1 Continue\nhttps://www.continue.dev/ https://github.com/continuedev/continue\n&lt;TBD&gt;\nВнедряем AI Code Assistant в разработку бесплатно и без вендорлока — Инструкция:\nhttps://ollama.com/blog/continue-code-assistant\nhttps://vsegpt.ru/ExtTools/Continue"
  },
  {
    "objectID": "win11-for-engineers-manual.html#работа-с-документами-1",
    "href": "win11-for-engineers-manual.html#работа-с-документами-1",
    "title": "Руководство",
    "section": "7.5 Работа с документами",
    "text": "7.5 Работа с документами\nДля работы со своими документами/файлами применяется технология RAG — Retrieval-Augmented Generation. Продвинутые пользователи могут использовать более мощные инструменты, например SillyTavern, а здесь далее будут описаны способы попроще.\n\n7.5.1 LMStudio\nВ этом приложении нет какого-то особого RAG или Баз Знаний (Knowledge Base), всё намного проще — прикрепляются файлы “скрепкой”, и запускается запрос. Вполне неплохо справляется.\n\n\n7.5.2 Open WebUI\nВ Open WebUI можно создать Базу Знаний (Knowledge Base) на основе локальных текстов, инструкция:\n\nЗагрузить данные: Workspace &gt; Knowledge &gt; + Create a Knowledge Base и загрузить файлы.\nСоздать Модель с загруженными данными: Workspace &gt; Models &gt; + Add New Model, выбрать исходную LLM модель, выбрать данные Knowledge Source, сохранить новую Модель-с-Данными (это может быть долго).\nВыбрать созданную Модель-с-Данными для нового чата.\n\n\n\n7.5.3 Page Assist\nВ Page Assist для создания Базы Знаний на основе локальных текстов потребуется скачать embedding модель nomic, которая будет читать загруженные текстовые документы и транслировать их в векторное семантическое пространство невысокой размерности. В настройках Settings &gt; RAG Settings выставить nomic-embed-text в качестве Embedding Model.\n\nВ меню Settings &gt; Manage Knowledge &gt; Add New Knowledge загрузить нужные pdf/doc/txt, и дождаться их обработки.\nНа главной странице, нажав снизу на “квадратики” выбрать нужную базу знаний. После чего запросы к LLM будут производиться с учётом данных из файлов.\n\n\n\nПримечание по RAG технологии\nСледует помнить, что на 2024г технология новая, отработана слабо, поэтому стоит учитывать, что, к примеру, данные могут выгрузиться в базу данных не полностью, или с ошибками, это особенно часто случается при работе с pdf, где разметка страницы может прерывать текст, а формулы без OCR вообще не вытащить. Существуют модели (и использующие их программы), которые могут не только выдёргивать тексты из pdf, но и умеют OCR pdf, картинок и видео, например Qwen2-VL. Но для их применения необходимы другие более сложные программы, например vLLM, SillyTavern или quivr."
  },
  {
    "objectID": "win11-for-engineers-manual.html#ограничения-командной-строки-windows",
    "href": "win11-for-engineers-manual.html#ограничения-командной-строки-windows",
    "title": "Руководство",
    "section": "8.1 Ограничения командной строки Windows",
    "text": "8.1 Ограничения командной строки Windows\nВ Windows * (wildcard) не раскрывается перед запуском программ, а передаётся прямо как звёздочка, и, скажем, обычная Linux команда ls * скажет, что нет такого файла *. У этого ограничения есть несколько решений:\n\nИспользовать BusyBox, где в каждую команду встроен свой глоббинг и правильное распознавание \\ | / в путях, и, тот же ls, из состава BusyBox, сработает как в Linux. BusyBox, это альтернатива сборкам Git-for-Windows/MSYS2. Этот вариант подходит для использования с WT/Conemu.\nИспользовать доработанный Conemu — Cmder, где глоббинг встроен в консольные скрипты, которые перед запуском команд осуществляют подмену wildcards на аргументы, как в Linux shell.\nДругие варианты — это использовать настоящий Linux shell, например, в виде терминала с WSL в WT/Conemu/Cmder, или, использовать bash/zsh из проектов Git-for-Windows/MSYS2 или BusyBox.\n\n\nОтступление о WT/Conemu vs. Cmder\nCmder — это донастроенный Conemu, со встроенным набором стандартных Linux утилит, плюс Clink. Т.е. Cmder всё необходимое носит с собой при установке скачивает заодно. При запуске Cmder автоматически ищет установленные утилиты из Git-for-Windows и прописывает их в пути (контролируется опцией /nix_tools). В случае с WT/Conemu эти утилиты изначально необходимо доустанавливать, и, возможно, прописывать вручную пути. Ещё у Cmder есть некоторое преимущество — это его мобильность (portable), т.е., что его можно носить и запускать преднастроенным с флешки. Из минусов Cmder — настройки по умолчанию для интерфейса весьма сомнительные, их обязательно придётся править.\nНо, Cmder, при стандартной установке с Git-for-Windows, не умеет распознавать направление слешей: прямой и обратный, и, например, не сможет отработать такую команду:\nfd --hidden \"\\.vhdx$\" %HOME% | xargs -I@ cp -v @ E:\\backup\\wsl\\\nПоэтому для нормальной работы Cmder потребуется доустанавливать BusyBox, и использовать опцию загрузки /nix_tools 0, чтобы по умолчанию не дописывались пути с Git-for-Windows. Но в таком случае Cmder становится практически идентичен Conemu.\n\nВ общем, Cmder — это достаточно противоречивая утилита, подкупающая портативностью и преднастроенностью. Но, при должной настройке, Windows Terminal или Conemu будут даже лучше, чем Cmder, за исключением момента с портативностью.\n\nВ данном руководстве будут рассмотрены оба варианта настройки терминала: и WT/Conemu+Clink+BusyBox, и Cmder. Если Cmder уже установлен и настроен, то предлагается настроить Windows Terminal на его использование. Если Cmder не установлен, то значит он вам не нужен и не надо с ним связываться. В этом случае предлагается установить и настроить Clink и BusyBox, чтобы получить универсальную командную оболочку, которая будет работать и в WT, и в Conemu. В целом, Главы про настройку Conemu и Cmder приведены, в большей мере, по историческим причинам, чтобы не утерять данную информацию."
  },
  {
    "objectID": "win11-for-engineers-manual.html#консольная-оболочка-clink-и-утилиты-busybox",
    "href": "win11-for-engineers-manual.html#консольная-оболочка-clink-и-утилиты-busybox",
    "title": "Руководство",
    "section": "8.2 Консольная оболочка Clink и утилиты BusyBox",
    "text": "8.2 Консольная оболочка Clink и утилиты BusyBox\nClink — это дополнение оболочки (shell) для Cmd.exe, интегрирующее следующие возможности: автодополнение, подсветка синтаксиса, история команд и поиск по ней, поиск файлов и папок, история переходов по папкам, алиасы.\nBusyBox — это набор Linux команд, скомпилированных для Windows, которые поддерживают wildcard globbing, как в Linux. Будет использоваться для настройки Windows Terminal (или Conemu).\nNote: Clink не работает внутри Far, т.е, в терминале Far по &lt;Ctrl+O&gt; все супер-пупер автодополнения и поиск от Clink не сработают — для работы Clink должна использоваться отдельная консоль.\n\n8.2.1 Установка Clink+BusyBox\nУстановить:\nscoop install busybox\nscoop install clink\nscoop install clink-completions\nscoop install clink-flex-prompt\nscoop install oh-my-posh\nscoop bucket add nerd-fonts\nscoop install nerd-fonts/IosevkaTerm-NF-Mono\n\n\n8.2.2 Настройка Clink\nНастройка Clink для нечёткого (fuzzy) поиска, автоподстановки ~ и переменных окружения, интеграции с VSCode: скопировать соответствующие скрипты в отдельную постоянную папку и настроить Clink на их использование:\nmkdir %UserProfile%\\.config\\clink-scripts\ncd %UserProfile%\\.config\\clink-scripts\n\nwget https://raw.githubusercontent.com/chrisant996/clink-gizmos/refs/heads/main/fzf.lua\nwget https://raw.githubusercontent.com/chrisant996/clink-gizmos/refs/heads/main/fuzzy_history.lua\nwget https://raw.githubusercontent.com/chrisant996/clink-gizmos/refs/heads/main/cwdhistory.lua\nwget https://raw.githubusercontent.com/chrisant996/clink-gizmos/refs/heads/main/tilde_autoexpand.lua\nwget https://raw.githubusercontent.com/chrisant996/clink-gizmos/refs/heads/main/vscode_shell_integration.lua\n\nclink installscripts %UserProfile%\\.config\\clink-scripts\nclink set fzf.default_bindings true\nclink set autosuggest.strategy match_prev_cmd history completion fuzzy_history\n\nclink set history.max_lines 100000\nclink set clink.logo none\n\n\n8.2.3 Алиасы для Clink\nАлиасы в Windows создаются командой doskey. В стартап-файле для Clink\n%LOCALAPPDATA%\\clink\\clink_start.cmd можно прописать соответствующие doskey команды:\n@echo off\n\nset HOME=%UserProfile%\nset LANG=en_US.utf8\n\ndoskey ll=ls --color=auto -lF $*\ndoskey l=ls --color=auto -lrtF $*\ndoskey ls=ls --color=auto -F $*\n\ndoskey sort=%UserProfile%\\scoop\\shims\\sort.exe $*\ndoskey time=%UserProfile%\\scoop\\shims\\time.exe $*\nВ результате в командной строке появятся привычные для Linux алиасы. В данном случае определены:\nls — выводит простой список файлов и папок,\nll — выводит подробный список файлов и папок,\nl — подробный список, отсортированный по времени модификации файлов/папок.\nNote: В этом стартап файле также можно прописать другие настройки, например, переменные окружения.\n\n\n8.2.4 Настройка внешнего вида CommandPrompt для Clink\n\nClink поставляется с несколькими вариантами темы оформления командной строки, их можно попробовать не устанавливая:\nclink config prompt list\nclink config prompt show &lt;prompt_name&gt;\nДля постоянного использования включить тему оформления командой:\nclink config prompt use &lt;prompt_name&gt;\n\nСуществует проект oh-my-posh для настройки вида командной строки для различных терминалов (CMD, PowerShell) с широкими возможностями настройки и большим списком уже преднастроенных вариантов. Включение oh-my-posh и выбор темы оформления:\nclink config prompt use oh-my-posh\nclink set ohmyposh.theme %UserProfile%\\scoop\\apps\\oh-my-posh\\current\\themes\\peru.omp.json\nВыбранная тема оформления peru почти идеальна, единственный недостаток — не отображает текущую папку в заголовке окна. Это исправляется модификацией темы оформления: сначала скопировать файл исходной темы в новый файл peru-wtitle.omp.json:\nmkdir %UserProfile%\\.config\\ohmyposh-themes\ncd %UserProfile%\\.config\\ohmyposh-themes\ncp %UserProfile%\\scoop\\apps\\oh-my-posh\\current\\themes\\peru.omp.json peru-wtitle.omp.json\nзатем добавить следующую строчку в файл peru-wtitle.omp.json почти в самый конец файла перед строкой \"version\": 3:\n\"console_title_template\": \"{{ .Shell }}: {{ if .Segments.Session.SSHSession }}\n{{ .UserName }}@{{ .HostName }}{{ end }}{{ if .WSL }}WSL: {{ end }}{{ .PWD }}\",\n(это одна строка, только она не помещается на ширину формата текста, поэтому записана в две строки).\nПереключить на новую созданную тему:\nclink config prompt use oh-my-posh\nclink set ohmyposh.theme %UserProfile%\\.config\\ohmyposh-themes\\peru-wtitle.omp.json\n\n\n8.2.5 Использование Clink\nСписки горячих клавиш Clink; ниже приведены наиболее часто используемые.\nАвтодополнение Clink работает как в Linux:\n\nTab: непосредственно дополнить в случае отсутствия неоднозначностей. В случае наличия вариантов они будут показаны, выбрать между ними вводом соответствующего символа и продолжить нажав Tab\n&lt;Right&gt; или End: принять предложенное в строке автодополнение до конца строки\nAlt+&lt;Right&gt;: принять предложенное в строке автодополнение на одно слово\n\nВ Clink консоли доступны удобные навигация и поиск по истории команд, навигация и поиск файлов:\n\nCtrl+R – интерактивный поиск по истории команд\nCtrl+T – интерактивный поиск по файлам и директориям в текущей директории\nAlt+C – быстрый переход из текущей директории в поддиректорию или к файлу\nAlt+B – интерактивный поиск доступным горячим клавишам, и применение этих команд\nCtrl+Space – интерактивный поиск по текущему автодополнению\nпоиск по Tab после ** – рекурсивному поиску по директориям и файлам в текущей директории\nF7: открыть окно со списком последних команд\nUp/Down: вверх/вниз по истории команд\nPgUp/PgDown: вверх/вниз по истории команд с учётом уже набранной части команды\nShift+PgUp: интерактивное меню с историей посещённых директорий (при установленном cwdhistory.lua)\nCtrl+Alt+U: эквивалентно cd .. – перейти в директорию выше\n..: эквивалентно cd ..\n...: эквивалентно cd ../..\ncd / или cd \\: перейти в корневую директорию\n~: перейти в домашнюю директорию\nc:, d:: переключиться на диск C, D и т.д.\nCtrl+PgUp/Ctrl+PgDown: скрол консоли вверх/вниз.\n\nТакже удобное редактирование команд в командной строке:\n\nCtrl+W: удалить слово слева от курсора\nCtrl+U: удалить всю команду слева от курсора и положить в “буфер”\nCtrl+Y: вставить из буфера (удалённое) по месту курсора\nEnd, Home, Ctrl+&lt;Left/Right&gt;: навигация по тексту\nShift+End, Shift+Home, Shift+Ctrl+&lt;Left/Right&gt;: выделение текста в командной строке\nShift+Mouse: выделение мышкой в неприспособленных для этого программах"
  },
  {
    "objectID": "win11-for-engineers-manual.html#консольный-терминал-windowsterminal-clink",
    "href": "win11-for-engineers-manual.html#консольный-терминал-windowsterminal-clink",
    "title": "Руководство",
    "section": "8.3 Консольный терминал WindowsTerminal + Clink",
    "text": "8.3 Консольный терминал WindowsTerminal + Clink\nПосле установки и настройки Clink останется только настроить профиль в WindowsTerminal.\nПрофиль для Clink в WindowsTerminal проще всего получить сдублировав профиль для cmd.exe, после чего в новом профиле в качестве запускаемой команды прописать:\n%SystemRoot%\\System32\\cmd.exe /k \"clink inject\""
  },
  {
    "objectID": "win11-for-engineers-manual.html#консольный-терминал-cmderconemu-clink",
    "href": "win11-for-engineers-manual.html#консольный-терминал-cmderconemu-clink",
    "title": "Руководство",
    "section": "8.4 Консольный терминал Cmder/Conemu + Clink",
    "text": "8.4 Консольный терминал Cmder/Conemu + Clink\nConemu/Cmder — это универсальный консольный терминал с открытым исходным кодом, позволяющий запускать все консольные приложения: Far, Putty, CMD, PowerShell, WSL, и пр., в одинаково выглядящем терминальном текстовом окне, с одинаково настроенным типом и размером шрифта, поведением горячих клавиш, размером окна.\nGit-for-Windows — это git, скомпилированный для Windows; также содержит набор Linux команд, но эти команды не поддерживают wildcard globbing. Устанавливается автоматически при работе со Scoop. Используется в Cmder.\nSome links: WSL, Pageant, Msys, 256colors.\nПосле установки Clink и BusyBox, установить Cmder или Conemu:\nscoop install cmder\nscoop bucket add extras\nscoop install extras/conemu\nscoop install extras/conemu-color-themes\nДля использования Clink в Conemu необходимо добавить вызов самого Clink: в настройках Conemu Settings &gt; Startup &gt; Tasks: модифицировать строку запуска Задачи/Task {Cmd}, заменив на\ncmd.exe /k \"clink inject && %ConEmuBaseDir%\\CmdInit.cmd\"\n\nНастройки Cmder/Conemu\n\nВ Windows11 консольные программы в Cmder/Conemu могут неправильно отображать цвета, глючить — в таком случае надо снять галочку Inject ConEmuHk в Cmder/Conemu в Settings &gt; Features: In-console options; и выбрать цветовую схему Monokai.\nДля показа иконок в Taskbar’е в Windows должна быть включена опция Show badges on taskbar buttons в Settings &gt; Personalization &gt; Taskbar.\nОдним из интересных вариантов интеграции Cmder в Windows будет настройка Панели задач (Taskbar) без группировки окон — чтобы каждый терминал был в отдельном окне Windows; при этом надо установить опции для открытия каждого терминала в новом окне в Settings &gt; General &gt; Appearance: Generic убрать первые две галочки — Single instance, Multiple consoles.\nСменить фон на непрозрачный: Settings &gt; Features &gt; Transparency.\nНастроить шрифт: Settings &gt; General &gt; Fonts, требуется шрифт с набором иконок NerdFonts, любой из них можно установить с помощью Scoop.\nКаждый терминал в своём окне: Settings &gt; General &gt; Appearance: Generic &gt; Single instance mode — отключить.\nРазрешить мышку в Far: Settings &gt; Keys&Macro &gt; Mouse: Mouse Options &gt; Send mouse events to console.\nПри желании Табы можно расположить сверху, а не снизу: Settings &gt; General: Tabs &gt; Tabs on bottom.\nНастроить вид курсора: Settings &gt; Features &gt; Text cursor.\nОтключить проверку обновлений: Settings &gt; General &gt; Update.\nКомбинации Ctrl+C, Ctrl+V, Ctrl+W, Ctrl+T для доступности в консольных приложениях следует перенастроить (в настройках в Cmder(Conemu) &gt; Settings &gt; Keys & Macro) на варианты с Shift, т.е.: Ctrl+Shift+C, Ctrl+Shift+V, Ctrl+Shift+W, Ctrl+Shift+T и т.п.\nДействие клика правой кнопкой мыши настраивается в Settings &gt; Keys&Macro &gt; Mouse: Mouse button actions -&gt; сделать Paste.\nCmder/Conemu имеет большое количество настроек, поэтому рекомендуется, разок его настроив, сохранить файл настроек ConEmu.xml, и в дальнейшем, применять его на других своих компьютерах.\nmc под Windows: сменить диск: Alt+D\n\n\n\nАлиасы для Cmder\nВ настройках в Settings &gt; Startup &gt; Environment есть поле для стартовых настроек. В это поле можно добавить свои переменные окружения и алиасы:\nset LANG=en_US.utf8\n\nunalias ll\nunalias l\nunalias ls\n\nalias ll=ls --show-control-chars -F -l --color --ignore={\"NTUSER.DAT*\",\"ntuser.dat*\"} $*\nalias l=ls --show-control-chars -CFGNhplrt --color --ignore={\"NTUSER.DAT*\",\"ntuser.dat*\"} $*\nalias ls=ls --show-control-chars -CFGNhp --color --ignore={\"NTUSER.DAT*\",\"ntuser.dat*\"} $*\n(Ещё потребуется удалить соответствующие алиасы из файла\n%HOME%\\scoop\\apps\\cmder\\current\\config\\user_aliases.cmd)\n\n\nАлиасы для Conemu\nАналогичные алиасы для Conemu, в Settings &gt; Startup &gt; Environment:\nset HOME=%HOMEDRIVE%%HOMEPATH%\nset LANG=en_US.utf8\nalias ll=ls --color=auto -lF $*\nalias l=ls --color=auto -lrtF $*\nalias ls=ls --color=auto -F $*\nА можно использовать те алиасы, что настроены в Clink.\n\n\nИспользование Cmder/Conemu\nСписки горячих клавиш: Cmder (Conemu) и Clink; ниже приведены наиболее часто используемые.\nУправление терминалами Cmder/Conemu:\n\nCtrl+`: глобальная комбинация клавиш вызова Cmder, не работает в поле ввода\nCtrl+Shift+T: диалог открытия новой вкладки/окна (по умолчанию Ctrl+T, см. Настройки Cmder ниже)\nCtrl+Shift+W: закрыть вкладку/окно (по умолчанию Ctrl+W, см. Настройки Cmder ниже)\nCtrl+D: завершить терминальную сессию, эквивалентно команде exit\nShift+Alt+#Number: открыть новую вкладку/окно по быстрому набору из меню открытия новых терминалов, см. Win+Alt+T\nAlt+Enter, Ctrl+Win+Enter: Full Screen\n\nУправление вкладками Cmder/Conemu работает когда все консоли открыты в одном окне Cmder/Conemu, а не когда каждый терминал в своём собственном окне. Управление вкладками:\n\nCtrl+#Number: переключиться на вкладку номер #Number\nCtrl+Tab: переключиться на следующую вкладку\nCtrl+Shift+Tab: переключиться на предыдущую вкладку"
  },
  {
    "objectID": "win11-for-engineers-manual.html#замечание-про-home",
    "href": "win11-for-engineers-manual.html#замечание-про-home",
    "title": "Руководство",
    "section": "8.5 Замечание про HOME",
    "text": "8.5 Замечание про HOME\n\nДля Clink переменную HOME можно прописать в стартап файле\n%LOCALAPPDATA%\\clink\\clink_start.cmd, см. раздел Алиасы для Clink.\nВ случае с WindowsTerminal переменную HOME можно задать в переменных среды окружения для пользователя:\nsetx HOME \"%UserProfile%\"\n, либо, при использовании Clink, она в нём была прописана.\nCmder самостоятельно создаёт переменную HOME.\nВ Conemu переменную HOME можно определить в настройках Startup &gt; Environment как HOME=%HOMEDRIVE%%HOMEPATH% или HOME=%UserProfile%."
  },
  {
    "objectID": "win11-for-engineers-manual.html#neovim",
    "href": "win11-for-engineers-manual.html#neovim",
    "title": "Руководство",
    "section": "8.6 Neovim",
    "text": "8.6 Neovim\nNeovim это обновлённый Vim, конфигурации для которого пишутся на вполне понятном Lua.\n\n8.6.1 Установка\nУстановка полноценного Neovim в Windows. Возможно какие-то пакеты уже были установлены — scoop пропустит повторную установку:\nscoop install llvm\nscoop install gcc\nscoop install curl\nscoop install luarocks\nscoop bucket add versions\nscoop install versions/lua51\nscoop install python\nscoop install ripgrep\nscoop install fzf\nscoop install fd\nscoop install iconv\nscoop install make\nscoop install nodejs-lts\nscoop install tree-sitter\nscoop install yarn\nscoop install neovim\nЕсли не установлен BusyBox, то установить ещё:\nscoop install gzip\nscoop install unzip\nscoop install wget\nВыйти и зайти заново в терминал, чтобы прописались пути для python и проч., после выполнить:\npython -m pip install --upgrade pynvim\nnpm install -g neovim\nУстановить настроенную конфигурацию kickstart.nvim с предустановленным набором плагинов, и набор словарей для проверки правописания:\ngit clone https://github.com/denius/kickstart.nvim.git %LOCALAPPDATA%\\nvim\n\nmkdir %LOCALAPPDATA%\\nvim\\spell\ncd %LOCALAPPDATA%\\nvim\\spell\n\nwget https://ftp.nluug.nl/pub/vim/runtime/spell/ru.utf-8.spl\nwget https://ftp.nluug.nl/pub/vim/runtime/spell/en.utf-8.spl\nwget https://ftp.nluug.nl/pub/vim/runtime/spell/en.utf-8.sug\nwget https://ftp.nluug.nl/pub/vim/runtime/spell/ru.utf-8.sug\n\ncd %HOME%\nЗапустить:\nnvim\nNote: если в Windows11 nvim после запуска покажет чёрный экран, то надо снять галочку Inject ConEmuHk в Cmder/Conemu в Settings &gt; Features: In-console options. И выбрать цветовую схему &lt;Monokai&gt;. Note: для 256-цветного терминала, возможно, потребуется донастройка.\nNote: в Neovim за синтаксис отвечает плагин treesitter, это парсер; в установленной конфигурации kickstart.nvim он уже установлен; treesitter самостоятельно заботится о парсинге всевозможных форматов. За семантику отвечает встроенный плагин lsp.nvim; LSP — это аббревиатура для Language-Server-Protocol, универсального сервиса, который обеспечивает: проверку корректности кода и поиск ошибок, автодополнение, переход к определению, подсказки и т.д.; LSP — это, де факто, стандарт в отрасли разработки, применяется во всех современных IDE и редакторах, в VSCode в том числе. Сервисы LSP для необходимых форматов устанавливаются отдельно, см. далее.\nВ процессе первого запуска nvim загрузит с интернета плагины в соответствии с конфигурацией kickstart.nvim. Для загрузки и обновления плагинов вручную набрать :Lazy и U.\nПосле выйти и заново войти в nvim, и набрать :Mason для запуска менеджера LSP-сервисов для настройки поддерживаемых языков программирования и форматов. В нём найти (/) строчку clangd и нажать i для установки поддержки языка C/C++; аналогично установить fortls для Fortran, python-lsp-server и pyright для Python. Для установки других форматов их следует поискать в списке существующих [LSP серверов](https://microsoft.github.io/language-server-protocol/implementors/servers/].\nПосле всех настроек можно проверить как всё это установилось командой :checkhealth. Возможно будет указано несколько Warning: про pyenv, про недостающие языки типа ruby или php, но это не имеет принципиального значения. Основное — надо убедиться что: а) плагин treesitter (парсер) нормально заработал, и, что: б) плагин LSP для данного типа файлов работает — он будет выводить разную диагностику для разных типов файлов.\nNote: Входящие в BusyBox утилиты имеют некоторые параметры аргументов несколько отличающиеся от Linux. Поэтому, один из плагинов Neovim (Mason.nvim), в :checkhealth сообщает о не настроенных программах wget, unzip, gzip, это сообщение можно игнорировать если установлен BusyBox. (CHECKME: проверить именно неработоспособность Neovim (Mason.nvim) в чистом BusyBox. &lt;TBD&gt;) В случае, если ошибка всё же реально проявляется, можно переустановить эти программы с целью замены на оригинальные; но, следует помнить, что при этом они перестанут нормально понимать пути файлов и глоббинг в Windows и использовать их надо будет с осторожность. scoop install unzip, scoop install gzip, scoop install wget. В данном случае, это баг со стороны Neovim, который собираются исправлять.\n\n\n8.6.2 Использование\n\n8.6.2.1 which-key\nВ установленной конфигурации kickstart.nvim предустановлен плагин which-key.nvim, показывающий справку по клавишам при нажатии на клавишу &lt;Пробел&gt; (в kickstart.nvim на &lt;Пробел&gt; настроен &lt;Leader&gt;). То есть после нажатия на пробел будет показан список команд с ведущим &lt;Leader&gt;. Нажав BackSpace (возврат) будет показан общий список комбинаций клавиш, причём некоторые из них многосимвольные (напр. g, z, [ и пр.), их списки буду раскрыты при нажатии на соответствующий символ.\n\n\n8.6.2.2 Поиск\nТакже, среди предустановленных есть плагин Telescope.nvim, позволяющий в интерактивном режиме производить поиск по всему что есть в редакторе: файлу, файлам, истории, поиск файлов; посмотреть состояние настроек и переменных, клавиатурные сочетания; позволяет сменить тему оформления: :Telescope colorscheme (например shine, wildcharm). В целом, все данные, которые есть в редакторе доступны через этот плагин. Запускается через команду :Telescope &lt;TAB&gt;, высветится список возможностей Telescope, выбрать и применить. Список преднастроенных в kickstart.nvim комбинаций клавиш (в режиме NORMAL) для Telescope:\n\n&lt;leader&gt;sh — [S]earch [H]elp\n&lt;leader&gt;sk — [S]earch [K]eymaps\n&lt;leader&gt;sf — [S]earch [F]iles\n&lt;leader&gt;ss — [S]earch [S]elect Telescope\n&lt;leader&gt;sw — [S]earch current [W]ord\n&lt;leader&gt;sg — [S]earch by [G]rep\n&lt;leader&gt;sd — [S]earch [D]iagnostics\n&lt;leader&gt;sr — [S]earch [R]esume\n&lt;leader&gt;s. — [S]earch Recent Files (“.” for repeat)\n&lt;leader&gt;&lt;leader&gt; — [ ] Find existing buffers\n&lt;leader&gt;/ — [/] Fuzzily search in current buffer\n&lt;leader&gt;s/ — [S]earch [/] in Open Files\n&lt;leader&gt;sn — [S]earch [N]eovim files\n\n\n\n8.6.2.3 Русский язык и правописание\nВ установленной конфигурации, включение-выключение подсветки проверки правописания будет происходить по команде &lt;LocalLeader&gt;s = \\s, а переключение языка по Ctrl-6 (в документации обозначается как Ctrl-^) в режиме редактирования (INSERT) или режиме команд (COMMAND), в нормальном режиме (NORMAL) команда Ctrl-^ не работает. Для режима команд индикатор текущей кодировки не отображается.\nДокументация https://neovim.io/doc/user/; команды nvim на stackoverflow. Есть множество шпаргалок по командам Vim/Neovim, например: https://devhints.io/vim.\n\n\n8.6.2.4 Некоторые команды Neovim\n\nстрелки влево/вправо бегают по меню выбора из командной строки, например, набрать :colorscheme и &lt;Tab&gt;, появится меню, перемещаться по которому клавишами влево-вправо, Ctrl-Y или &lt;Enter&gt; — выбрать;\nвыбор стрелками вверх/вниз в меню autocomplete при редактировании в режиме INSERT, выбор — Ctrl-Y (Y, это от Yes);\nAlt-1, Alt-2, … — переключиться на таб №; &lt;LocalLeader&gt;h, &lt;LocalLeader&gt;l — переключение между табами (кастомная настройка);\n* в режиме NORMAL — поиск слова под курсором;\ngcc/gc: закоментировать-раскоментировать строку или выбранную область, в нормальном и визуальном режимах, соответственно;\n[d и ]d: переход к предыдущему или следующему диагностическому сообщению LSP. &lt;C-W&gt;d: открыть окошко для вывода сообщения под курсором полностью;\nLSP не только подсвечивает ошибки, но может некоторые из них исправлять — при этом он высветит сообщение fix available. Комбинация &lt;Leader&gt;ca (вызывает :vim.lsp.buf.code_action()) производит исправление;\nна &lt;LocalLeader&gt;p настроен показ истории yank (буфера копи-пасты);\n\nNote: для постоянной смены схемы подсветки её необходимо прописать в конце файла\n%HOME%\\AppData\\Local\\nvim\\init.lua в виде строки vim.cmd.colorscheme 'wildcharm' (здесь wildcharm — это название схемы), плюс определить вариант light/dark, если у схемы есть такой выбор: vim.o.background = 'light'.\nNote: в Windows также можно настроить работу Neovim через WSL, и запускать его: wsl vi somefile."
  },
  {
    "objectID": "win11-for-engineers-manual.html#управление-dockerом",
    "href": "win11-for-engineers-manual.html#управление-dockerом",
    "title": "Руководство",
    "section": "9.1 Управление Docker’ом",
    "text": "9.1 Управление Docker’ом\nDocker работает с контейнерами (виртуальными машинами) (containers), образами (images), и томами (volumes). Контейнер — это набор из образ + том.\nПри скачивании или создании виртуальной машины (контейнера) Docker создаёт image, который не изменяется, он read-only. Образ — это специальная файловая система (overlayfs) со слепком операционной системы. Образ состоит из слоёв — при обновлении виртуалки на него накатываются новые слои, может какие-то слои откатываются и переписываются.\nПри запуске контейнера все созданные в процессе работы данные записываются в том (volume). Если при запуске контейнера была указана опция --rm, то использовавшийся при работе том будет удалён после окончания работы контейнера. docker volume ls — список сохранённых томов. Данные постоянно хранятся в томах, в том числе между запусками контейнеров; хранятся пока не будет удалён содержащий их контейнер — docker container rm &lt;container id&gt;, либо не будет удалён вручную — docker volume rm &lt;volume id&gt;.\ndocker container ls — список запущенных контейнеров, docker container ls -a — список всех контейнеров в системе.\nВ Windows и образы и тома хранятся в одном файле:\nC:\\Users\\user\\AppData\\Local\\Docker\\wsl\\disk\\docker_data.vhdx — удобно для контроля занимаемого места (см. так же утилиту WinDirStat).\n\n9.1.1 Запуск Docker контейнеров\nСамостоятельно формировать команды запуска Docker контейнеров вряд ли придётся, но для понимания запускаемых строчек краткое пояснение опций запуска команды docker run:\n\n-t – запуск в консольном режиме;\n-i – запуск в интерактивном режиме;\n-d – запустить виртуалку в бэкграунде, т.е. она продолжит работать фоновом режиме;\n-v path1:path2 – смонтировать локальный путь path1 внутри контейнера в точке path2; это требуется чтобы работать с локальными данными изнутри контейнера;\n--rm – удалить созданные контейнером данные после завершения работы контейнера, т.е. удаляется соответствующий том (данные из папок, смонтированных с -v, не затрагиваются);\n--name some-container-name – создаёт имя для созданного контейнера, по которому, в дальнейшем, можно будет запускать этот контейнер короткой командой docker start some-container-name, при этом все опции запуска будут сохранены; docker stop some-container-name — остановить контейнер."
  },
  {
    "objectID": "win11-for-engineers-manual.html#backuprestore-wsl-систем",
    "href": "win11-for-engineers-manual.html#backuprestore-wsl-систем",
    "title": "Руководство",
    "section": "9.2 Backup/Restore WSL систем",
    "text": "9.2 Backup/Restore WSL систем\nПосмотреть какие WSL системы установлены, какая основная:\nwsl -l -v\nСкопировать/забэкапить WSL систему, здесь Ubuntu — название WSL системы, которая будет забэкаплена:\nwsl --export Ubuntu D:\\backup\\ubuntu-24.04-20241117.tar\nВосстановить из бэкапа, здесь ubuntu2 название новой WSL системы, путь C:\\wsl\\ubuntu — место где будет лежать файл-контейнер .vhdx с новой восстановленной системой (чтобы далеко не прятался и можно было глянуть сколько места занимает):\nwsl --import ubuntu2 C:\\wsl\\ubuntu D:\\backup\\some-file.tar\nПосле восстановления из бэкапа новой машины необходимо указать пользователя по-умолчанию: ubuntu2.exe config --default-user aero, где ubuntu2.exe, это название новой VM, для которой Windows автоматически создаст приложение для запуска.\nСделать ubuntu2 основной, запускаемой по умолчанию: wsl -s ubuntu2\nВ дальнейшем можно будет удалить старую WSL машину: wsl --unregister Ubuntu, при этом все данные внутри неё будут потеряны. Для безопасности лучше сначала импортировать в новое имя, установить её по-умолчанию, поработать с новой, а потом уже удалять старую — при работе через команду wsl название виртуалки не имеет значения.\n\n9.2.1 Установка произвольных Linux\nАналогичным способом, из архива, можно создать новую Linux систему на компьютере, скопировав и установив соответствующий дистрибутивный файл Linux-системы с интернета, например со страницы проекта wsldl.\n\nFedora\n&lt;TBD&gt;\nhttps://fedoraproject.org/wiki/Changes/FedoraWSL\nFedora имеет преимущество перед Ubuntu, так как RedHat/Fedora изначально ориентированный на HPC Linux дистрибутив, и в нём лучше поддержка параллелизации, отладки Fortran, и прочим разделам высокопроизводительных вычислений.\n\n\n\n9.2.2 Импортирование локальных образов с Docker\nDocker также может импортировать бэкапы полноценных Linux систем (не WSL) в виде .tar.gz архива:\ndocker import &lt;filename&gt; &lt;repository&gt;:&lt;tag&gt;\ndocker import some-linux-backup.tar.gz linux-test:1.0\nС последующим запуском\ndocker run -i -t &lt;image id&gt; &lt;commands&gt;\nгде в качестве &lt;commands&gt; для Linux может выступать /bin/bash; &lt;image id&gt; посмотреть командой docker images:\ndocker images\ndocker run -i -t linux-test:1.0 /bin/bash\nТаким методом можно создавать/копировать и запускать виртуалки с Linux (например, с менеджерами лицензий, и т.п.) из бэкапов, созданных с помощью команды\ntar --one-file-system -cvpzSf /mnt/backup/some-ubuntu-backup.tar.gz / /boot --exclude=\"/mnt/*\""
  },
  {
    "objectID": "win11-for-engineers-manual.html#uup-unified-update-platform-загрузка-ms-windows",
    "href": "win11-for-engineers-manual.html#uup-unified-update-platform-загрузка-ms-windows",
    "title": "Руководство",
    "section": "10.1 UUP — Unified Update Platform — загрузка MS Windows",
    "text": "10.1 UUP — Unified Update Platform — загрузка MS Windows\n\nЗагрузка с портала Microsoft Unified Update Platform, это официальный способ получения установочных пакетов и обновлений для продуктов Microsoft.\n\nДля установки рекомендуется использовать версию build 22631.3296 (23H2). Это версия, с одной стороны, достаточно свежая, чтобы были драйвера для новых ноутов, а с другой стороны, эта версия всё ещё позволяет при установке создать локальную учётную запись без необходимости онлайн регистрации учётной записи Microsoft (можно использовать и более новые версии при настройке с помощью Rufus, см. далее в Создание загрузочной флешки).\n\n10.1.1 uupdump.net\nhttps://uupdump.net/ – это сайт для создания скрипта, который скачает с сайта Microsoft и создаст загрузочный iso-образ Windows. Сайт https://uupdump.net/, возможно, недоступен в России, в этом случае следует воспользоваться другим вариантом.\nИспользование: на сайте выбрать желаемую версию, понажимать далее, в процессе отказаться от скачивания последних обновлений, и, скачать zip-архив (небольшой). Этот архив распаковать в папку на диске с достаточным количеством свободного места (12 Гб?), и запустить скрипт из распакованного архива, uup_download_windows.cmd (выполняется около часа). Если есть сомнения какую версию выбрать, то вот ссылка на Windows11 23H2 (4.8 Гб). (Руководство.)\n\n\n10.1.2 UUPMediaCreator\nUUPMediaCreator, кроссплатформенная12 утилита, которая позволяет скачать и создать установочный ISO-образ с операционной системой Windows. Этот iso-образ создаётся по официальной методике получения образов и обновлений c официального сайта Microsoft Unified Update Platform.\nУстановка:\nscoop bucket add hoilc_scoop-lemon https://github.com/hoilc/scoop-lemon\nscoop install hoilc_scoop-lemon/uupmediacreator\nИспользование. Перейти в папку, где будет создаваться загрузочный iso-образ, выполнить загрузку13 (22631.3296 соответствует 23H2):\nUUPDownload -s Professional -v 10.0.22621.1 --r Retail -b Retail -c ni_release -t amd64 -l en-us -y 10.0.22631.3296\nЗапустить сборку iso-диска (здесь надо подставить путь куда скачались файлы):\nsudo UUPMediaConverter -l en-us -u \"path-to-downloaded-files\" -i Win11-23H2.iso -e Professional\nNote: UUPMediaConverter выполняется полчаса.\n\n\n10.1.3 Создание загрузочной флешки\nПодготовить загрузочную флешку из загруженного iso-образа можно с помощью утилиты Rufus под Windows, или mkusb под Linux.\nУстановка Rufus:\nwinget install --id=Rufus.Rufus -e\nRufus позволяет при создании сделать Customize Windows Installation, а именно запрет на: проверку ограничений, сбор данных (телеметрию), онлайн регистрацию. При выборе типа загрузки следует выбирать GPT/SecureBoot, а не MBR/Legacy (который предназначен для очень старых компьютеров)."
  },
  {
    "objectID": "win11-for-engineers-manual.html#odt-office-deployment-tool-загрузка-ms-office",
    "href": "win11-for-engineers-manual.html#odt-office-deployment-tool-загрузка-ms-office",
    "title": "Руководство",
    "section": "10.2 ODT — Office Deployment Tool — загрузка MS Office",
    "text": "10.2 ODT — Office Deployment Tool — загрузка MS Office\nODT — Microsoft Office Deployment Tool, Средство Развертывания Office, официальный инструмент для: выбора конфигурации MSOffice для загрузки, загрузки MSOffice, и установки. Официальный обзор.\n\n10.2.1 Выбор версии MSOffice\nПротив обновления: Все последние версии MSOffice, начиная с 2016, это всё одна версия 16.0, т.е., по сути, все новые Офисы, это 16 версия с сервис-паками, ответственными за улучшения интерфейса, но не принципиальные изменения. Единственное препятствие к работе в прошлых Офисах, это окончание срока поддержки и прекращение обновлений (безопасности). Поэтому, если никакой MSOffice не установлен, то следует устанавливать самую новую версию, если же MSOffice версий 2016 (или новее) уже установлен и устраивает, то пусть и стоит.\nЗа обновления: Изменения пользовательского интерфейса, а значит и пользовательского удобства могут улучшаться с новыми версиями; например, в PowerPoint, появилось выравнивание элементов на слайде (я не помню с какой версии), и это значительно улучшило удобство использования. Поэтому, по возможности, следует опробовать новые версии MSOffice на предмет улучшения удобства использования, и, если офис стал лучше, то переустанавливать на более новый.\nLTSC (Long-Term Servicing Channel) — это версия Офиса для корпоративного сегмента, где после установки в процессе эксплуатации не должен как-либо меняться функционал или преднастройки; поэтому, LTSC, это версия Офиса с обновлениями безопасности, но без обновления функционала. Поэтому, при возможности выбора, лучше установить полноценную версию с Current канала; но, если LTSC-версия уже установлена, то и ладно.\nOffice 365 — это офис с ежемесячной или ежегодной подпиской, требует постоянного подключения к интернету. Сейчас, в отсутствии возможности оплачивать онлайн, ни в коем случае не стоит связываться с Office 365. Note: Сейчас Microsoft старается продвигать только Office 365, а все упоминания об обычном бессрочном автономном Офисе удалены со страниц сайта Microsoft.\n\n10.2.1.1 OEM, Retail или Volume?\nЛицензии OEM — это лицензии на ПО, поставляемые производителями и сборщиками техники вместе с новыми ноутбуками и компьютерами. Microsoft выделяет производителям техники целые пулы OEM лицензий по небольшой цене. Но, по Европейским законам, производители могут продавать не только продукт целиком, но и комплектующие к нему, и, в данном случае, они могут продавать эти лицензии отдельно от компьютерной техники. Каждая OEM лицензия входит в какой-то конкретный пул лицензий, который закреплён за конкретным производителем, т.е., OEM, это не какая-то абстрактная безликая лицензия, а выпущенная определённым производителем. В целом, покупка OEM лицензии достаточно безопасна, случаев отзыва пулов лицензий очень и очень немного. Из особенностей OEM лицензии следует отметить, что она, в отличии от Retail или Volume лицензий, “одноразовая”, то есть, активировав её один раз, ключ нельзя применить второй раз, и программу нельзя будет переустановить или перенести на другой компьютер. Не может быть активирована сервисом KMS.\nRetail (розничная) лицензия — это привычная “коробочная” (FPP) версия из магазина, сейчас может поставляться в виде электронного ESD ключа. Эту лицензию можно переустановить (для MSOffice не более трёх раз) на другой компьютер (на старом, естественно, лицензия перестанет работать). Должна быть активирована в течении месяца с момента установки. Не может быть активирована сервисом KMS.\nVolume (корпоративные) лицензии для большого количества лицензий (от 5 штук) — поштучно не продаются. Помимо коммерческих предприятий часто используются в образовательных учреждениях. Volume лицензии активируются с помощью KMS сервиса — службы предоставляемой сервером. Активации с помощью KMS сервиса по локальной сети, это совершенно стандартная процедура, которая происходит автоматически для продуктов с Volume лицензией при правильной настройке свойств локального сетевого подключения (при получении IP-адреса, по DHCP, в качестве DNS сервера будет прописан адрес KMS сервиса). В случае подсоединения через интернет, возможность KMS активации ограничена.\n\nOEM — может быть установлена только один раз. Эту лицензию нельзя перенести на другой компьютер. Должна быть активирована в течении месяца с момента установки.\nRetail — лицензию можно переустановить на другой компьютер (MSOffice не более трёх раз). Должна быть активирована в течении месяца с момента установки.\nVolume — Использует не ключи, а сервисы лицензий KMS. Нет ограничений на перенос на другой компьютер.\n\n\n\n10.2.1.2 Версии автономного MSOffice:\n\nOffice Home & Student — Word, Excel, PowerPoint, OneNote;\nOffice Home & Business — + Outlook;\nOffice Standard — + Publisher, Web Apps; сейчас не продаётся;\nOffice Professional — + Access, SharePoint Workspace; сейчас не продаётся;\nOffice Professional Plus — + InfoPath, Skype for Business или Lync или Microsoft Teams, OneDrive for Business (ранее был SharePoint Workspace).\n\nИтого, если не используется MS Access, то Office Home или Student абсолютно достаточно!\nNote: Раньше (2003) редактор математических формул был только в Professional версии, как обстоит дело сейчас давно никто не проверял. CHECKME: &lt;TBD&gt;\n\n\n\n10.2.2 Загрузка\nПолучение утилиты развёртывания ODT:\n\nЛибо скачать по ссылке officedeploymenttool.exe и распаковать этот самораспаковывающийся архив в папку куда будет загружаться офис;\nЛибо установить\nwinget install --id=Microsoft.OfficeDeploymentTool -e\nи скопировать файлы из “C:\\Program Files\\OfficeDeploymentTool” в нужную папку.\n\nВ любом случае в папке для закачки будут необходимы два файла: setup.exe и configuration-Office365-x64.xml.\nПоставляемый configuration-Office365-x64.xml скопировать в configuration.xml, и отредактировать спецификацию загружаемого офиса, инструкция.\n\nПри выборе загружаемой версии офиса потребуется его идентификатор, который можно найти на сайте “Список идентификаторов продуктов, поддерживаемых средством развертывания Office для запуска”.\nСписок возможных исключений: “Access”, “Bing”, “Excel”, “Groove”, “Lync”, “OneDrive”, “OneNote”, “Outlook”, “OutlookForWindows”, “PowerPoint”, “Publisher”, “Teams”, “Word”.\nОпция &lt;Remove All=“True” /&gt; указывает перед установкой удалить все установленные версии MSOffice.\n\nПара примеров конфигурации configuration.xml.\n&lt;Configuration&gt;\n  &lt;Add OfficeClientEdition=\"64\" Channel=\"Current\"&gt;\n    &lt;Product ID=\"ProPlus2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n      &lt;!-- &lt;ExcludeApp ID=\"Access \"/&gt; --&gt;\n      &lt;ExcludeApp ID=\"Bing \"/&gt;\n      &lt;ExcludeApp ID=\"Groove \"/&gt;\n      &lt;ExcludeApp ID=\"Lync \"/&gt;\n      &lt;ExcludeApp ID=\"OneDrive \"/&gt;\n      &lt;ExcludeApp ID=\"OneNote \"/&gt;\n      &lt;ExcludeApp ID=\"Outlook \"/&gt;\n      &lt;ExcludeApp ID=\"OutlookForWindows \"/&gt;\n      &lt;ExcludeApp ID=\"Publisher \"/&gt;\n      &lt;ExcludeApp ID=\"Teams \"/&gt;\n    &lt;/Product&gt;\n    &lt;Product ID=\"VisioPro2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n    &lt;/Product&gt;\n    &lt;Product ID=\"ProjectPro2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n    &lt;/Product&gt;\n  &lt;/Add&gt;\n  &lt;Remove All=\"True\" /&gt;\n  &lt;!--  &lt;RemoveMSI All=\"True\" /&gt; --&gt;\n  &lt;!--  &lt;Display Level=\"None\" AcceptEULA=\"TRUE\" /&gt;  --&gt;\n  &lt;!--  &lt;Property Name=\"AUTOACTIVATE\" Value=\"1\" /&gt;  --&gt;\n&lt;/Configuration&gt;\n&lt;Configuration&gt;\n  &lt;Add OfficeClientEdition=\"64\" Channel=\"Current\"&gt;\n    &lt;Product ID=\"Word2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n      &lt;ExcludeApp ID=\"OneDrive \"/&gt;\n    &lt;/Product&gt;\n    &lt;Product ID=\"PowerPoint2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n      &lt;ExcludeApp ID=\"OneDrive \"/&gt;\n    &lt;/Product&gt;\n    &lt;Product ID=\"Excel2024Volume\"&gt;\n      &lt;Language ID=\"ru-ru\" /&gt;\n      &lt;Language ID=\"en-us\" /&gt;\n      &lt;ExcludeApp ID=\"OneDrive \"/&gt;\n    &lt;/Product&gt;\n  &lt;/Add&gt;\n  &lt;Remove All=\"True\" /&gt;\n  &lt;!--  &lt;RemoveMSI All=\"True\" /&gt; --&gt;\n  &lt;!--  &lt;Display Level=\"None\" AcceptEULA=\"TRUE\" /&gt;  --&gt;\n  &lt;!--  &lt;Property Name=\"AUTOACTIVATE\" Value=\"1\" /&gt;  --&gt;\n&lt;/Configuration&gt;\nПеред скачиванием изменить регион для ODT на US, иначе из-за санкций утилита не начнёт загрузку:\nreg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Common\\ExperimentConfigs\\Ecs\" /v \"CountryCode\" /t REG_SZ /d \"std::wstring|US\" /f\nЗапустить загрузку:\nsetup.exe /download configuration.xml\nУстановить загруженный офис:\nsetup.exe /configure configuration.xml\n\n\n10.2.3 Office Tools Plus\nЕщё есть программа с графическим интерфейсом Office Tool Plus https://otp.landian.vip/en-us/, в которой все вышеописанные действия можно сделать в графическом интерфейсе. Также, умеет активировать Офис с помощью KMS сервисов, расположенных в интернете.\nscoop install extras/office-tool-plus"
  },
  {
    "objectID": "win11-for-engineers-manual.html#footnotes",
    "href": "win11-for-engineers-manual.html#footnotes",
    "title": "Руководство",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nне SDI!↩︎\nJust-In-Time↩︎\nФактическое поведение может варьироваться в зависимости от различных опций и настроек.↩︎\nПодробности для опции -gravity см. в руководстве по программе.↩︎\nhttps://awesomeprogrammer.com/blog/2023/01/15/how-to-force-telegram-to-upload-mp4-as-mp4-and-not-gifs/↩︎\nhttps://stackoverflow.com/questions/12368151/adding-silent-audio-in-ffmpeg#answer-18700245↩︎\nhttps://stackoverflow.com/questions/38702981/which-video-format-is-right-for-sendvideo-method-in-telegram-bot-api/77255128#77255128↩︎\nСкачивает 1.5 Гб, займёт 3 Гб↩︎\nразмер скачиваемого образа 1.5 Гбайт↩︎\nразмер скачиваемого образа 4.0ГБ, займёт 8.5ГБ↩︎\nState-Of-The-Art↩︎\nможно загрузить и в Linux/MacOS↩︎\nПотребуется до 12 Гб свободного места↩︎"
  }
]